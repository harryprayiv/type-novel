/* Generated by Spago v0.93.43 */
(() => {
  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };
  var composeFlipped = function(dictSemigroupoid) {
    var compose1 = compose(dictSemigroupoid);
    return function(f) {
      return function(g) {
        return compose1(g)(f);
      };
    };
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var on = function(f) {
    return function(g) {
      return function(x) {
        return function(y) {
          return f(g(x))(g(y));
        };
      };
    };
  };
  var flip = function(f) {
    return function(b) {
      return function(a) {
        return f(a)(b);
      };
    };
  };
  var $$const = function(a) {
    return function(v) {
      return a;
    };
  };
  var applyFlipped = function(x) {
    return function(f) {
      return f(x);
    };
  };
  var apply = function(f) {
    return function(x) {
      return f(x);
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return function(fa) {
      return function(f) {
        return map111(f)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var voidLeft = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return function(f) {
      return function(x) {
        return map111($$const(x))(f);
      };
    };
  };
  var functorFn = {
    map: /* @__PURE__ */ compose(semigroupoidFn)
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Data.Semigroup/foreign.js
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupUnit = {
    append: function(v) {
      return function(v1) {
        return unit;
      };
    }
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Control.Alt/index.js
  var alt = function(dict) {
    return dict.alt;
  };

  // output/Control.Apply/foreign.js
  var arrayApply = function(fs) {
    return function(xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l * k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyArray = {
    apply: arrayApply,
    Functor0: function() {
      return functorArray;
    }
  };
  var apply2 = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply12 = apply2(dictApply);
    var map27 = map(dictApply.Functor0());
    return function(a) {
      return function(b) {
        return apply12(map27($$const(identity2))(a))(b);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply12 = apply2(dictApply);
    var map27 = map(dictApply.Functor0());
    return function(f) {
      return function(a) {
        return function(b) {
          return apply12(map27(f)(a))(b);
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var when = function(dictApplicative) {
    var pure16 = pure(dictApplicative);
    return function(v) {
      return function(v1) {
        if (v) {
          return v1;
        }
        ;
        if (!v) {
          return pure16(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
  var liftA1 = function(dictApplicative) {
    var apply9 = apply2(dictApplicative.Apply0());
    var pure16 = pure(dictApplicative);
    return function(f) {
      return function(a) {
        return apply9(pure16(f))(a);
      };
    };
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq6) {
      return function(gt) {
        return function(x) {
          return function(y) {
            return x < y ? lt : x === y ? eq6 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;
  var ordNumberImpl = unsafeCompareImpl;
  var ordCharImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqBooleanImpl = refEq;
  var eqIntImpl = refEq;
  var eqNumberImpl = refEq;
  var eqCharImpl = refEq;
  var eqStringImpl = refEq;

  // output/Data.Eq/index.js
  var eqString = {
    eq: eqStringImpl
  };
  var eqNumber = {
    eq: eqNumberImpl
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eqChar = {
    eq: eqCharImpl
  };
  var eqBoolean = {
    eq: eqBooleanImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eq2 = /* @__PURE__ */ eq(eqBoolean);
  var notEq = function(dictEq) {
    var eq32 = eq(dictEq);
    return function(x) {
      return function(y) {
        return eq2(eq32(x)(y))(false);
      };
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();

  // output/Data.Ring/foreign.js
  var intSub = function(x) {
    return function(y) {
      return x - y | 0;
    };
  };

  // output/Data.Semiring/foreign.js
  var intAdd = function(x) {
    return function(y) {
      return x + y | 0;
    };
  };
  var intMul = function(x) {
    return function(y) {
      return x * y | 0;
    };
  };

  // output/Data.Semiring/index.js
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };
  var add = function(dict) {
    return dict.add;
  };

  // output/Data.Ring/index.js
  var ringInt = {
    sub: intSub,
    Semiring0: function() {
      return semiringInt;
    }
  };

  // output/Data.Ord/index.js
  var ordNumber = /* @__PURE__ */ function() {
    return {
      compare: ordNumberImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqNumber;
      }
    };
  }();
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var ordChar = /* @__PURE__ */ function() {
    return {
      compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqChar;
      }
    };
  }();
  var compare = function(dict) {
    return dict.compare;
  };
  var max = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(x) {
      return function(y) {
        var v = compare3(x)(y);
        if (v instanceof LT) {
          return y;
        }
        ;
        if (v instanceof EQ) {
          return x;
        }
        ;
        if (v instanceof GT) {
          return x;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v.constructor.name]);
      };
    };
  };
  var min = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(x) {
      return function(y) {
        var v = compare3(x)(y);
        if (v instanceof LT) {
          return x;
        }
        ;
        if (v instanceof EQ) {
          return x;
        }
        ;
        if (v instanceof GT) {
          return y;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [v.constructor.name]);
      };
    };
  };
  var clamp = function(dictOrd) {
    var min12 = min(dictOrd);
    var max1 = max(dictOrd);
    return function(low2) {
      return function(hi) {
        return function(x) {
          return min12(hi)(max1(low2)(x));
        };
      };
    };
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var boundedChar = {
    top: topChar,
    bottom: bottomChar,
    Ord0: function() {
      return ordChar;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };
  var showNumberImpl = function(n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  // output/Data.Show/index.js
  var showNumber = {
    show: showNumberImpl
  };
  var showInt = {
    show: showIntImpl
  };
  var show = function(dict) {
    return dict.show;
  };

  // output/Data.Maybe/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe = function(a) {
    return maybe(a)(identity3);
  };
  var fromJust = function() {
    return function(v) {
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
    };
  };
  var applyMaybe = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return map2(v.value0)(v1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return v1(v.value0);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var applicativeMaybe = /* @__PURE__ */ function() {
    return {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
  }();
  var altMaybe = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof Nothing) {
          return v1;
        }
        ;
        return v;
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var plusMaybe = /* @__PURE__ */ function() {
    return {
      empty: Nothing.value,
      Alt0: function() {
        return altMaybe;
      }
    };
  }();

  // output/Data.MediaType.Common/index.js
  var applicationJSON = "application/json";
  var applicationFormURLEncoded = "application/x-www-form-urlencoded";

  // output/Affjax.ResponseFormat/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var $$ArrayBuffer = /* @__PURE__ */ function() {
    function $$ArrayBuffer2(value0) {
      this.value0 = value0;
    }
    ;
    $$ArrayBuffer2.create = function(value0) {
      return new $$ArrayBuffer2(value0);
    };
    return $$ArrayBuffer2;
  }();
  var Blob = /* @__PURE__ */ function() {
    function Blob3(value0) {
      this.value0 = value0;
    }
    ;
    Blob3.create = function(value0) {
      return new Blob3(value0);
    };
    return Blob3;
  }();
  var Document = /* @__PURE__ */ function() {
    function Document3(value0) {
      this.value0 = value0;
    }
    ;
    Document3.create = function(value0) {
      return new Document3(value0);
    };
    return Document3;
  }();
  var Json = /* @__PURE__ */ function() {
    function Json3(value0) {
      this.value0 = value0;
    }
    ;
    Json3.create = function(value0) {
      return new Json3(value0);
    };
    return Json3;
  }();
  var $$String = /* @__PURE__ */ function() {
    function $$String3(value0) {
      this.value0 = value0;
    }
    ;
    $$String3.create = function(value0) {
      return new $$String3(value0);
    };
    return $$String3;
  }();
  var Ignore = /* @__PURE__ */ function() {
    function Ignore2(value0) {
      this.value0 = value0;
    }
    ;
    Ignore2.create = function(value0) {
      return new Ignore2(value0);
    };
    return Ignore2;
  }();
  var toResponseType = function(v) {
    if (v instanceof $$ArrayBuffer) {
      return "arraybuffer";
    }
    ;
    if (v instanceof Blob) {
      return "blob";
    }
    ;
    if (v instanceof Document) {
      return "document";
    }
    ;
    if (v instanceof Json) {
      return "text";
    }
    ;
    if (v instanceof $$String) {
      return "text";
    }
    ;
    if (v instanceof Ignore) {
      return "";
    }
    ;
    throw new Error("Failed pattern match at Affjax.ResponseFormat (line 44, column 3 - line 50, column 19): " + [v.constructor.name]);
  };
  var toMediaType = function(v) {
    if (v instanceof Json) {
      return new Just(applicationJSON);
    }
    ;
    return Nothing.value;
  };
  var string = /* @__PURE__ */ function() {
    return new $$String(identity4);
  }();
  var ignore = /* @__PURE__ */ function() {
    return new Ignore(identity4);
  }();

  // output/Affjax.Web/foreign.js
  var driver = {
    newXHR: function() {
      return new XMLHttpRequest();
    },
    fixupUrl: function(url) {
      return url || "/";
    }
  };

  // output/Affjax/foreign.js
  function _ajax(platformSpecificDriver, timeoutErrorMessageIdent, requestFailedMessageIdent, mkHeader, options2) {
    return function(errback, callback) {
      var xhr = platformSpecificDriver.newXHR();
      var fixedUrl = platformSpecificDriver.fixupUrl(options2.url, xhr);
      xhr.open(options2.method || "GET", fixedUrl, true, options2.username, options2.password);
      if (options2.headers) {
        try {
          for (var i = 0, header; (header = options2.headers[i]) != null; i++) {
            xhr.setRequestHeader(header.field, header.value);
          }
        } catch (e) {
          errback(e);
        }
      }
      var onerror = function(msgIdent) {
        return function() {
          errback(new Error(msgIdent));
        };
      };
      xhr.onerror = onerror(requestFailedMessageIdent);
      xhr.ontimeout = onerror(timeoutErrorMessageIdent);
      xhr.onload = function() {
        callback({
          status: xhr.status,
          statusText: xhr.statusText,
          headers: xhr.getAllResponseHeaders().split("\r\n").filter(function(header2) {
            return header2.length > 0;
          }).map(function(header2) {
            var i2 = header2.indexOf(":");
            return mkHeader(header2.substring(0, i2))(header2.substring(i2 + 2));
          }),
          body: xhr.response
        });
      };
      xhr.responseType = options2.responseType;
      xhr.withCredentials = options2.withCredentials;
      xhr.timeout = options2.timeout;
      xhr.send(options2.content);
      return function(error2, cancelErrback, cancelCallback) {
        try {
          xhr.abort();
        } catch (e) {
          return cancelErrback(e);
        }
        return cancelCallback();
      };
    };
  }

  // output/Affjax.RequestBody/index.js
  var ArrayView = /* @__PURE__ */ function() {
    function ArrayView2(value0) {
      this.value0 = value0;
    }
    ;
    ArrayView2.create = function(value0) {
      return new ArrayView2(value0);
    };
    return ArrayView2;
  }();
  var Blob2 = /* @__PURE__ */ function() {
    function Blob3(value0) {
      this.value0 = value0;
    }
    ;
    Blob3.create = function(value0) {
      return new Blob3(value0);
    };
    return Blob3;
  }();
  var Document2 = /* @__PURE__ */ function() {
    function Document3(value0) {
      this.value0 = value0;
    }
    ;
    Document3.create = function(value0) {
      return new Document3(value0);
    };
    return Document3;
  }();
  var $$String2 = /* @__PURE__ */ function() {
    function $$String3(value0) {
      this.value0 = value0;
    }
    ;
    $$String3.create = function(value0) {
      return new $$String3(value0);
    };
    return $$String3;
  }();
  var FormData = /* @__PURE__ */ function() {
    function FormData2(value0) {
      this.value0 = value0;
    }
    ;
    FormData2.create = function(value0) {
      return new FormData2(value0);
    };
    return FormData2;
  }();
  var FormURLEncoded = /* @__PURE__ */ function() {
    function FormURLEncoded2(value0) {
      this.value0 = value0;
    }
    ;
    FormURLEncoded2.create = function(value0) {
      return new FormURLEncoded2(value0);
    };
    return FormURLEncoded2;
  }();
  var Json2 = /* @__PURE__ */ function() {
    function Json3(value0) {
      this.value0 = value0;
    }
    ;
    Json3.create = function(value0) {
      return new Json3(value0);
    };
    return Json3;
  }();
  var toMediaType2 = function(v) {
    if (v instanceof FormURLEncoded) {
      return new Just(applicationFormURLEncoded);
    }
    ;
    if (v instanceof Json2) {
      return new Just(applicationJSON);
    }
    ;
    return Nothing.value;
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var unwrap = function() {
    return coerce2;
  };
  var unwrap1 = /* @__PURE__ */ unwrap();
  var un = function() {
    return function(v) {
      return unwrap1;
    };
  };
  var alaF = function() {
    return function() {
      return function() {
        return function() {
          return function(v) {
            return coerce2;
          };
        };
      };
    };
  };

  // output/Affjax.RequestHeader/index.js
  var unwrap2 = /* @__PURE__ */ unwrap();
  var Accept = /* @__PURE__ */ function() {
    function Accept2(value0) {
      this.value0 = value0;
    }
    ;
    Accept2.create = function(value0) {
      return new Accept2(value0);
    };
    return Accept2;
  }();
  var ContentType = /* @__PURE__ */ function() {
    function ContentType2(value0) {
      this.value0 = value0;
    }
    ;
    ContentType2.create = function(value0) {
      return new ContentType2(value0);
    };
    return ContentType2;
  }();
  var RequestHeader = /* @__PURE__ */ function() {
    function RequestHeader2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    RequestHeader2.create = function(value0) {
      return function(value1) {
        return new RequestHeader2(value0, value1);
      };
    };
    return RequestHeader2;
  }();
  var value = function(v) {
    if (v instanceof Accept) {
      return unwrap2(v.value0);
    }
    ;
    if (v instanceof ContentType) {
      return unwrap2(v.value0);
    }
    ;
    if (v instanceof RequestHeader) {
      return v.value1;
    }
    ;
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 26, column 1 - line 26, column 33): " + [v.constructor.name]);
  };
  var name = function(v) {
    if (v instanceof Accept) {
      return "Accept";
    }
    ;
    if (v instanceof ContentType) {
      return "Content-Type";
    }
    ;
    if (v instanceof RequestHeader) {
      return v.value0;
    }
    ;
    throw new Error("Failed pattern match at Affjax.RequestHeader (line 21, column 1 - line 21, column 32): " + [v.constructor.name]);
  };

  // output/Affjax.ResponseHeader/index.js
  var ResponseHeader = /* @__PURE__ */ function() {
    function ResponseHeader2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ResponseHeader2.create = function(value0) {
      return function(value1) {
        return new ResponseHeader2(value0, value1);
      };
    };
    return ResponseHeader2;
  }();

  // output/Control.Bind/foreign.js
  var arrayBind = function(arr) {
    return function(f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  // output/Control.Bind/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var discard = function(dict) {
    return dict.discard;
  };
  var bindArray = {
    bind: arrayBind,
    Apply0: function() {
      return applyArray;
    }
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisliFlipped = function(dictBind) {
    var bindFlipped1 = bindFlipped(dictBind);
    return function(f) {
      return function(g) {
        return function(a) {
          return bindFlipped1(f)(g(a));
        };
      };
    };
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };
  var join = function(dictBind) {
    var bind12 = bind(dictBind);
    return function(m) {
      return bind12(m)(identity5);
    };
  };

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();
  var note = function(a) {
    return maybe(new Left(a))(Right.create);
  };
  var functorEither = {
    map: function(f) {
      return function(m) {
        if (m instanceof Left) {
          return new Left(m.value0);
        }
        ;
        if (m instanceof Right) {
          return new Right(f(m.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
      };
    }
  };
  var either = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var hush = /* @__PURE__ */ function() {
    return either($$const(Nothing.value))(Just.create);
  }();

  // output/Effect/foreign.js
  var pureE = function(a) {
    return function() {
      return a;
    };
  };
  var bindE = function(a) {
    return function(f) {
      return function() {
        return f(a())();
      };
    };
  };
  var forE = function(lo) {
    return function(hi) {
      return function(f) {
        return function() {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  // output/Control.Monad/index.js
  var whenM = function(dictMonad) {
    var bind7 = bind(dictMonad.Bind1());
    var when6 = when(dictMonad.Applicative0());
    return function(mb) {
      return function(m) {
        return bind7(mb)(function(b) {
          return when6(b)(m);
        });
      };
    };
  };
  var ap = function(dictMonad) {
    var bind7 = bind(dictMonad.Bind1());
    var pure11 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a) {
        return bind7(f)(function(f$prime) {
          return bind7(a)(function(a$prime) {
            return pure11(f$prime(a$prime));
          });
        });
      };
    };
  };

  // output/Data.EuclideanRing/foreign.js
  var intDegree = function(x) {
    return Math.min(Math.abs(x), 2147483647);
  };
  var intDiv = function(x) {
    return function(y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };
  var intMod = function(x) {
    return function(y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return (x % yy + yy) % yy;
    };
  };

  // output/Data.CommutativeRing/index.js
  var commutativeRingInt = {
    Ring0: function() {
      return ringInt;
    }
  };

  // output/Data.EuclideanRing/index.js
  var mod = function(dict) {
    return dict.mod;
  };
  var euclideanRingInt = {
    degree: intDegree,
    div: intDiv,
    mod: intMod,
    CommutativeRing0: function() {
      return commutativeRingInt;
    }
  };
  var div = function(dict) {
    return dict.div;
  };

  // output/Data.Monoid/index.js
  var monoidUnit = {
    mempty: unit,
    Semigroup0: function() {
      return semigroupUnit;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
  var lift22 = /* @__PURE__ */ lift2(applyEffect);
  var semigroupEffect = function(dictSemigroup) {
    return {
      append: lift22(append(dictSemigroup))
    };
  };
  var monoidEffect = function(dictMonoid) {
    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
    return {
      mempty: pureE(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupEffect1;
      }
    };
  };

  // output/Effect.Exception/foreign.js
  function error(msg) {
    return new Error(msg);
  }
  function message(e) {
    return e.message;
  }
  function throwException(e) {
    return function() {
      throw e;
    };
  }

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };
  var catchError = function(dict) {
    return dict.catchError;
  };
  var $$try = function(dictMonadError) {
    var catchError1 = catchError(dictMonadError);
    var Monad0 = dictMonadError.MonadThrow0().Monad0();
    var map27 = map(Monad0.Bind1().Apply0().Functor0());
    var pure11 = pure(Monad0.Applicative0());
    return function(a) {
      return catchError1(map27(Right.create)(a))(function($52) {
        return pure11(Left.create($52));
      });
    };
  };

  // output/Data.Identity/index.js
  var Identity = function(x) {
    return x;
  };
  var functorIdentity = {
    map: function(f) {
      return function(m) {
        return f(m);
      };
    }
  };
  var applyIdentity = {
    apply: function(v) {
      return function(v1) {
        return v(v1);
      };
    },
    Functor0: function() {
      return functorIdentity;
    }
  };
  var bindIdentity = {
    bind: function(v) {
      return function(f) {
        return f(v);
      };
    },
    Apply0: function() {
      return applyIdentity;
    }
  };
  var applicativeIdentity = {
    pure: Identity,
    Apply0: function() {
      return applyIdentity;
    }
  };
  var monadIdentity = {
    Applicative0: function() {
      return applicativeIdentity;
    },
    Bind1: function() {
      return bindIdentity;
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$new = _new;

  // output/Control.Monad.Rec.Class/index.js
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var map3 = /* @__PURE__ */ map(functorEffect);
  var Loop = /* @__PURE__ */ function() {
    function Loop2(value0) {
      this.value0 = value0;
    }
    ;
    Loop2.create = function(value0) {
      return new Loop2(value0);
    };
    return Loop2;
  }();
  var Done = /* @__PURE__ */ function() {
    function Done2(value0) {
      this.value0 = value0;
    }
    ;
    Done2.create = function(value0) {
      return new Done2(value0);
    };
    return Done2;
  }();
  var tailRecM = function(dict) {
    return dict.tailRecM;
  };
  var monadRecEffect = {
    tailRecM: function(f) {
      return function(a) {
        var fromDone = function(v) {
          if (v instanceof Done) {
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44): " + [v.constructor.name]);
        };
        return function __do3() {
          var r = bindFlipped2($$new)(f(a))();
          (function() {
            while (!function __do4() {
              var v = read(r)();
              if (v instanceof Loop) {
                var e = f(v.value0)();
                write(e)(r)();
                return false;
              }
              ;
              if (v instanceof Done) {
                return true;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28): " + [v.constructor.name]);
            }()) {
            }
            ;
            return {};
          })();
          return map3(fromDone)(read(r))();
        };
      };
    },
    Monad0: function() {
      return monadEffect;
    }
  };

  // output/Control.Monad.ST.Global/index.js
  var toEffect = unsafeCoerce2;

  // output/Control.Monad.ST.Internal/foreign.js
  var map_ = function(f) {
    return function(a) {
      return function() {
        return f(a());
      };
    };
  };
  var pure_ = function(a) {
    return function() {
      return a;
    };
  };
  var bind_ = function(a) {
    return function(f) {
      return function() {
        return f(a())();
      };
    };
  };
  function forST(lo) {
    return function(hi) {
      return function(f) {
        return function() {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  }
  function newSTRef(val) {
    return function() {
      return { value: val };
    };
  }
  var read2 = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var modifyImpl2 = function(f) {
    return function(ref) {
      return function() {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
  var write2 = function(a) {
    return function(ref) {
      return function() {
        return ref.value = a;
      };
    };
  };

  // output/Control.Monad.ST.Internal/index.js
  var $runtime_lazy2 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var modify$prime = modifyImpl2;
  var modify = function(f) {
    return modify$prime(function(s) {
      var s$prime = f(s);
      return {
        state: s$prime,
        value: s$prime
      };
    });
  };
  var functorST = {
    map: map_
  };
  var monadST = {
    Applicative0: function() {
      return applicativeST;
    },
    Bind1: function() {
      return bindST;
    }
  };
  var bindST = {
    bind: bind_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var applicativeST = {
    pure: pure_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
    return {
      apply: ap(monadST),
      Functor0: function() {
        return functorST;
      }
    };
  });
  var applyST = /* @__PURE__ */ $lazy_applyST(47);

  // output/Control.Monad.ST.Class/index.js
  var monadSTST = {
    liftST: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadST;
    }
  };
  var monadSTEffect = {
    liftST: toEffect,
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftST = function(dict) {
    return dict.liftST;
  };

  // output/Data.HeytingAlgebra/foreign.js
  var boolConj = function(b1) {
    return function(b2) {
      return b1 && b2;
    };
  };
  var boolDisj = function(b1) {
    return function(b2) {
      return b1 || b2;
    };
  };
  var boolNot = function(b) {
    return !b;
  };

  // output/Data.HeytingAlgebra/index.js
  var not = function(dict) {
    return dict.not;
  };
  var ff = function(dict) {
    return dict.ff;
  };
  var disj = function(dict) {
    return dict.disj;
  };
  var heytingAlgebraBoolean = {
    ff: false,
    tt: true,
    implies: function(a) {
      return function(b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
    },
    conj: boolConj,
    disj: boolDisj,
    not: boolNot
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var uncurry = function(f) {
    return function(v) {
      return f(v.value0)(v.value1);
    };
  };
  var snd = function(v) {
    return v.value1;
  };
  var functorTuple = {
    map: function(f) {
      return function(m) {
        return new Tuple(m.value0, f(m.value1));
      };
    }
  };
  var fst = function(v) {
    return v.value0;
  };

  // output/Effect.Class/index.js
  var monadEffectEffect = {
    liftEffect: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/Control.Monad.Except.Trans/index.js
  var map4 = /* @__PURE__ */ map(functorEither);
  var ExceptT = function(x) {
    return x;
  };
  var runExceptT = function(v) {
    return v;
  };
  var mapExceptT = function(f) {
    return function(v) {
      return f(v);
    };
  };
  var functorExceptT = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return {
      map: function(f) {
        return mapExceptT(map111(map4(f)));
      }
    };
  };
  var monadExceptT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeExceptT(dictMonad);
      },
      Bind1: function() {
        return bindExceptT(dictMonad);
      }
    };
  };
  var bindExceptT = function(dictMonad) {
    var bind7 = bind(dictMonad.Bind1());
    var pure11 = pure(dictMonad.Applicative0());
    return {
      bind: function(v) {
        return function(k) {
          return bind7(v)(either(function($193) {
            return pure11(Left.create($193));
          })(function(a) {
            var v1 = k(a);
            return v1;
          }));
        };
      },
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var applyExceptT = function(dictMonad) {
    var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadExceptT(dictMonad)),
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
  var applicativeExceptT = function(dictMonad) {
    return {
      pure: function() {
        var $194 = pure(dictMonad.Applicative0());
        return function($195) {
          return ExceptT($194(Right.create($195)));
        };
      }(),
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var monadThrowExceptT = function(dictMonad) {
    var monadExceptT1 = monadExceptT(dictMonad);
    return {
      throwError: function() {
        var $204 = pure(dictMonad.Applicative0());
        return function($205) {
          return ExceptT($204(Left.create($205)));
        };
      }(),
      Monad0: function() {
        return monadExceptT1;
      }
    };
  };
  var altExceptT = function(dictSemigroup) {
    var append6 = append(dictSemigroup);
    return function(dictMonad) {
      var Bind1 = dictMonad.Bind1();
      var bind7 = bind(Bind1);
      var pure11 = pure(dictMonad.Applicative0());
      var functorExceptT1 = functorExceptT(Bind1.Apply0().Functor0());
      return {
        alt: function(v) {
          return function(v1) {
            return bind7(v)(function(rm) {
              if (rm instanceof Right) {
                return pure11(new Right(rm.value0));
              }
              ;
              if (rm instanceof Left) {
                return bind7(v1)(function(rn) {
                  if (rn instanceof Right) {
                    return pure11(new Right(rn.value0));
                  }
                  ;
                  if (rn instanceof Left) {
                    return pure11(new Left(append6(rm.value0)(rn.value0)));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [rn.constructor.name]);
                });
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [rm.constructor.name]);
            });
          };
        },
        Functor0: function() {
          return functorExceptT1;
        }
      };
    };
  };

  // output/Control.Monad.Except/index.js
  var unwrap3 = /* @__PURE__ */ unwrap();
  var runExcept = function($3) {
    return unwrap3(runExceptT($3));
  };

  // output/Data.Argonaut.Core/foreign.js
  function id(x) {
    return x;
  }
  function stringify(j) {
    return JSON.stringify(j);
  }

  // output/Foreign.Object/foreign.js
  var empty = {};
  function toArrayWithKey(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
  var keys = Object.keys || toArrayWithKey(function(k) {
    return function() {
      return k;
    };
  });

  // output/Data.Array/foreign.js
  var replicateFill = function(count2, value13) {
    if (count2 < 1) {
      return [];
    }
    var result = new Array(count2);
    return result.fill(value13);
  };
  var replicatePolyfill = function(count2, value13) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count2; i++) {
      result[n++] = value13;
    }
    return result;
  };
  var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var length = function(xs) {
    return xs.length;
  };
  var indexImpl = function(just, nothing, xs, i) {
    return i < 0 || i >= xs.length ? nothing : just(xs[i]);
  };
  var filterImpl = function(f, xs) {
    return xs.filter(f);
  };
  var partitionImpl = function(f, xs) {
    var yes = [];
    var no = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes, no };
  };
  var sliceImpl = function(s, e, l) {
    return l.slice(s, e);
  };
  var unsafeIndexImpl = function(xs, n) {
    return xs[n];
  };

  // output/Data.Array.ST/foreign.js
  function newSTArray() {
    return [];
  }
  var lengthImpl = function(xs) {
    return xs.length;
  };
  var spliceImpl = function(i, howMany, bs, xs) {
    return xs.splice.apply(xs, [i, howMany].concat(bs));
  };
  function unsafeFreezeThawImpl(xs) {
    return xs;
  }
  var unsafeFreezeImpl = unsafeFreezeThawImpl;
  function copyImpl(xs) {
    return xs.slice();
  }
  var freezeImpl = copyImpl;
  var thawImpl = copyImpl;
  var pushImpl = function(a, xs) {
    return xs.push(a);
  };

  // output/Control.Monad.ST.Uncurried/foreign.js
  var runSTFn1 = function runSTFn12(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
  var runSTFn2 = function runSTFn22(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };
  var runSTFn4 = function runSTFn42(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
  };

  // output/Data.Array.ST/index.js
  var unsafeFreeze = /* @__PURE__ */ runSTFn1(unsafeFreezeImpl);
  var thaw = /* @__PURE__ */ runSTFn1(thawImpl);
  var withArray = function(f) {
    return function(xs) {
      return function __do3() {
        var result = thaw(xs)();
        f(result)();
        return unsafeFreeze(result)();
      };
    };
  };
  var splice = /* @__PURE__ */ runSTFn4(spliceImpl);
  var push = /* @__PURE__ */ runSTFn2(pushImpl);
  var length2 = /* @__PURE__ */ runSTFn1(lengthImpl);
  var freeze = /* @__PURE__ */ runSTFn1(freezeImpl);

  // output/Data.Array.ST.Iterator/index.js
  var map5 = /* @__PURE__ */ map(functorST);
  var not2 = /* @__PURE__ */ not(heytingAlgebraBoolean);
  var $$void2 = /* @__PURE__ */ $$void(functorST);
  var Iterator = /* @__PURE__ */ function() {
    function Iterator2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Iterator2.create = function(value0) {
      return function(value1) {
        return new Iterator2(value0, value1);
      };
    };
    return Iterator2;
  }();
  var next = function(v) {
    return function __do3() {
      var i = read2(v.value1)();
      modify(function(v1) {
        return v1 + 1 | 0;
      })(v.value1)();
      return v.value0(i);
    };
  };
  var iterator = function(f) {
    return map5(Iterator.create(f))(newSTRef(0));
  };
  var iterate = function(iter) {
    return function(f) {
      return function __do3() {
        var $$break = newSTRef(false)();
        while (map5(not2)(read2($$break))()) {
          (function __do4() {
            var mx = next(iter)();
            if (mx instanceof Just) {
              return f(mx.value0)();
            }
            ;
            if (mx instanceof Nothing) {
              return $$void2(write2(true)($$break))();
            }
            ;
            throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
          })();
        }
        ;
        return {};
      };
    };
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };

  // output/Control.Plus/index.js
  var empty2 = function(dict) {
    return dict.empty;
  };

  // output/Data.Monoid.Disj/index.js
  var Disj = function(x) {
    return x;
  };
  var semigroupDisj = function(dictHeytingAlgebra) {
    var disj2 = disj(dictHeytingAlgebra);
    return {
      append: function(v) {
        return function(v1) {
          return disj2(v)(v1);
        };
      }
    };
  };
  var monoidDisj = function(dictHeytingAlgebra) {
    var semigroupDisj1 = semigroupDisj(dictHeytingAlgebra);
    return {
      mempty: ff(dictHeytingAlgebra),
      Semigroup0: function() {
        return semigroupDisj1;
      }
    };
  };

  // output/Data.Foldable/index.js
  var alaF2 = /* @__PURE__ */ alaF()()()();
  var foldr = function(dict) {
    return dict.foldr;
  };
  var oneOf = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictPlus) {
      return foldr22(alt(dictPlus.Alt0()))(empty2(dictPlus));
    };
  };
  var oneOfMap = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictPlus) {
      var alt9 = alt(dictPlus.Alt0());
      var empty11 = empty2(dictPlus);
      return function(f) {
        return foldr22(function($453) {
          return alt9(f($453));
        })(empty11);
      };
    };
  };
  var traverse_ = function(dictApplicative) {
    var applySecond2 = applySecond(dictApplicative.Apply0());
    var pure11 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond2(f($454));
        })(pure11(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_1 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_1(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var foldableMaybe = {
    foldr: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v2.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldl: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v1)(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty3 = mempty(dictMonoid);
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty3;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append6 = append(dictMonoid.Semigroup0());
      var mempty3 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append6(f(x))(acc);
          };
        })(mempty3);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };
  var any = function(dictFoldable) {
    var foldMap2 = foldMap(dictFoldable);
    return function(dictHeytingAlgebra) {
      return alaF2(Disj)(foldMap2(monoidDisj(dictHeytingAlgebra)));
    };
  };

  // output/Data.Function.Uncurried/foreign.js
  var runFn2 = function(fn) {
    return function(a) {
      return function(b) {
        return fn(a, b);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return fn(a, b, c);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function(d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };

  // output/Data.FunctorWithIndex/foreign.js
  var mapWithIndexArray = function(f) {
    return function(xs) {
      var l = xs.length;
      var result = Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(i)(xs[i]);
      }
      return result;
    };
  };

  // output/Data.Functor.Compose/index.js
  var functorCompose = function(dictFunctor) {
    var map27 = map(dictFunctor);
    return function(dictFunctor1) {
      var map111 = map(dictFunctor1);
      return {
        map: function(f) {
          return function(v) {
            return map27(map111(f))(v);
          };
        }
      };
    };
  };

  // output/Data.FunctorWithIndex/index.js
  var mapWithIndex = function(dict) {
    return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
    mapWithIndex: mapWithIndexArray,
    Functor0: function() {
      return functorArray;
    }
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = /* @__PURE__ */ function() {
    function array1(a) {
      return [a];
    }
    function array2(a) {
      return function(b) {
        return [a, b];
      };
    }
    function array3(a) {
      return function(b) {
        return function(c) {
          return [a, b, c];
        };
      };
    }
    function concat2(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply9) {
      return function(map27) {
        return function(pure11) {
          return function(f) {
            return function(array) {
              function go2(bot, top3) {
                switch (top3 - bot) {
                  case 0:
                    return pure11([]);
                  case 1:
                    return map27(array1)(f(array[bot]));
                  case 2:
                    return apply9(map27(array2)(f(array[bot])))(f(array[bot + 1]));
                  case 3:
                    return apply9(apply9(map27(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top3 - bot) / 4) * 2;
                    return apply9(map27(concat2)(go2(bot, pivot)))(go2(pivot, top3));
                }
              }
              return go2(0, array.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Traversable/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var traverse = function(dict) {
    return dict.traverse;
  };
  var sequenceDefault = function(dictTraversable) {
    var traverse22 = traverse(dictTraversable);
    return function(dictApplicative) {
      return traverse22(dictApplicative)(identity6);
    };
  };
  var traversableArray = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      return traverseArrayImpl(apply2(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
    },
    sequence: function(dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
    },
    Functor0: function() {
      return functorArray;
    },
    Foldable1: function() {
      return foldableArray;
    }
  };

  // output/Data.Unfoldable/foreign.js
  var unfoldrArrayImpl = function(isNothing2) {
    return function(fromJust5) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b) {
              var result = [];
              var value13 = b;
              while (true) {
                var maybe2 = f(value13);
                if (isNothing2(maybe2)) return result;
                var tuple = fromJust5(maybe2);
                result.push(fst2(tuple));
                value13 = snd2(tuple);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/foreign.js
  var unfoldr1ArrayImpl = function(isNothing2) {
    return function(fromJust5) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b) {
              var result = [];
              var value13 = b;
              while (true) {
                var tuple = f(value13);
                result.push(fst2(tuple));
                var maybe2 = snd2(tuple);
                if (isNothing2(maybe2)) return result;
                value13 = fromJust5(maybe2);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/index.js
  var fromJust2 = /* @__PURE__ */ fromJust();
  var unfoldable1Array = {
    unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
  };

  // output/Data.Unfoldable/index.js
  var fromJust3 = /* @__PURE__ */ fromJust();
  var unfoldr = function(dict) {
    return dict.unfoldr;
  };
  var unfoldableArray = {
    unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
    Unfoldable10: function() {
      return unfoldable1Array;
    }
  };

  // output/Data.Array/index.js
  var unsafeIndex = function() {
    return runFn2(unsafeIndexImpl);
  };
  var snoc = function(xs) {
    return function(x) {
      return withArray(push(x))(xs)();
    };
  };
  var slice = /* @__PURE__ */ runFn3(sliceImpl);
  var singleton2 = function(a) {
    return [a];
  };
  var partition = /* @__PURE__ */ runFn2(partitionImpl);
  var mapWithIndex2 = /* @__PURE__ */ mapWithIndex(functorWithIndexArray);
  var index = /* @__PURE__ */ function() {
    return runFn4(indexImpl)(Just.create)(Nothing.value);
  }();
  var last = function(xs) {
    return index(xs)(length(xs) - 1 | 0);
  };
  var filter = /* @__PURE__ */ runFn2(filterImpl);
  var drop = function(n) {
    return function(xs) {
      var $173 = n < 1;
      if ($173) {
        return xs;
      }
      ;
      return slice(n)(length(xs))(xs);
    };
  };
  var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
  var mapMaybe = function(f) {
    return concatMap(function() {
      var $189 = maybe([])(singleton2);
      return function($190) {
        return $189(f($190));
      };
    }());
  };

  // output/Data.FoldableWithIndex/index.js
  var foldr8 = /* @__PURE__ */ foldr(foldableArray);
  var mapWithIndex3 = /* @__PURE__ */ mapWithIndex(functorWithIndexArray);
  var foldl8 = /* @__PURE__ */ foldl(foldableArray);
  var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
  };
  var foldlWithIndex = function(dict) {
    return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
    var foldrWithIndex1 = foldrWithIndex(dictFoldableWithIndex);
    return function(dictMonoid) {
      var append6 = append(dictMonoid.Semigroup0());
      var mempty3 = mempty(dictMonoid);
      return function(f) {
        return foldrWithIndex1(function(i) {
          return function(x) {
            return function(acc) {
              return append6(f(i)(x))(acc);
            };
          };
        })(mempty3);
      };
    };
  };
  var foldableWithIndexArray = {
    foldrWithIndex: function(f) {
      return function(z) {
        var $291 = foldr8(function(v) {
          return function(y) {
            return f(v.value0)(v.value1)(y);
          };
        })(z);
        var $292 = mapWithIndex3(Tuple.create);
        return function($293) {
          return $291($292($293));
        };
      };
    },
    foldlWithIndex: function(f) {
      return function(z) {
        var $294 = foldl8(function(y) {
          return function(v) {
            return f(v.value0)(y)(v.value1);
          };
        })(z);
        var $295 = mapWithIndex3(Tuple.create);
        return function($296) {
          return $294($295($296));
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
    },
    Foldable0: function() {
      return foldableArray;
    }
  };

  // output/Data.Argonaut.Core/index.js
  var jsonEmptyObject = /* @__PURE__ */ id(empty);

  // output/Data.Argonaut.Parser/foreign.js
  function _jsonParser(fail3, succ2, s) {
    try {
      return succ2(JSON.parse(s));
    } catch (e) {
      return fail3(e.message);
    }
  }

  // output/Data.Argonaut.Parser/index.js
  var jsonParser = function(j) {
    return _jsonParser(Left.create, Right.create, j);
  };

  // output/Data.String.Common/foreign.js
  var replace = function(s1) {
    return function(s2) {
      return function(s3) {
        return s3.replace(s1, s2);
      };
    };
  };
  var replaceAll = function(s1) {
    return function(s2) {
      return function(s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2);
      };
    };
  };
  var split = function(sep) {
    return function(s) {
      return s.split(sep);
    };
  };
  var trim = function(s) {
    return s.trim();
  };
  var joinWith = function(s) {
    return function(xs) {
      return xs.join(s);
    };
  };

  // output/JSURI/foreign.js
  function encodeURIComponent_to_RFC3986(input) {
    return input.replace(/[!'()*]/g, function(c) {
      return "%" + c.charCodeAt(0).toString(16);
    });
  }
  function _encodeFormURLComponent(fail3, succeed, input) {
    try {
      return succeed(encodeURIComponent_to_RFC3986(encodeURIComponent(input)).replace(/%20/g, "+"));
    } catch (err) {
      return fail3(err);
    }
  }

  // output/JSURI/index.js
  var encodeFormURLComponent = /* @__PURE__ */ function() {
    return runFn3(_encodeFormURLComponent)($$const(Nothing.value))(Just.create);
  }();

  // output/Data.FormURLEncoded/index.js
  var apply3 = /* @__PURE__ */ apply2(applyMaybe);
  var map6 = /* @__PURE__ */ map(functorMaybe);
  var traverse2 = /* @__PURE__ */ traverse(traversableArray)(applicativeMaybe);
  var toArray = function(v) {
    return v;
  };
  var encode = /* @__PURE__ */ function() {
    var encodePart = function(v) {
      if (v.value1 instanceof Nothing) {
        return encodeFormURLComponent(v.value0);
      }
      ;
      if (v.value1 instanceof Just) {
        return apply3(map6(function(key2) {
          return function(val) {
            return key2 + ("=" + val);
          };
        })(encodeFormURLComponent(v.value0)))(encodeFormURLComponent(v.value1.value0));
      }
      ;
      throw new Error("Failed pattern match at Data.FormURLEncoded (line 37, column 16 - line 39, column 114): " + [v.constructor.name]);
    };
    var $37 = map6(joinWith("&"));
    var $38 = traverse2(encodePart);
    return function($39) {
      return $37($38(toArray($39)));
    };
  }();

  // output/Data.HTTP.Method/index.js
  var OPTIONS = /* @__PURE__ */ function() {
    function OPTIONS2() {
    }
    ;
    OPTIONS2.value = new OPTIONS2();
    return OPTIONS2;
  }();
  var GET = /* @__PURE__ */ function() {
    function GET2() {
    }
    ;
    GET2.value = new GET2();
    return GET2;
  }();
  var HEAD = /* @__PURE__ */ function() {
    function HEAD2() {
    }
    ;
    HEAD2.value = new HEAD2();
    return HEAD2;
  }();
  var POST = /* @__PURE__ */ function() {
    function POST2() {
    }
    ;
    POST2.value = new POST2();
    return POST2;
  }();
  var PUT = /* @__PURE__ */ function() {
    function PUT2() {
    }
    ;
    PUT2.value = new PUT2();
    return PUT2;
  }();
  var DELETE = /* @__PURE__ */ function() {
    function DELETE2() {
    }
    ;
    DELETE2.value = new DELETE2();
    return DELETE2;
  }();
  var TRACE = /* @__PURE__ */ function() {
    function TRACE2() {
    }
    ;
    TRACE2.value = new TRACE2();
    return TRACE2;
  }();
  var CONNECT = /* @__PURE__ */ function() {
    function CONNECT2() {
    }
    ;
    CONNECT2.value = new CONNECT2();
    return CONNECT2;
  }();
  var PROPFIND = /* @__PURE__ */ function() {
    function PROPFIND2() {
    }
    ;
    PROPFIND2.value = new PROPFIND2();
    return PROPFIND2;
  }();
  var PROPPATCH = /* @__PURE__ */ function() {
    function PROPPATCH2() {
    }
    ;
    PROPPATCH2.value = new PROPPATCH2();
    return PROPPATCH2;
  }();
  var MKCOL = /* @__PURE__ */ function() {
    function MKCOL2() {
    }
    ;
    MKCOL2.value = new MKCOL2();
    return MKCOL2;
  }();
  var COPY = /* @__PURE__ */ function() {
    function COPY2() {
    }
    ;
    COPY2.value = new COPY2();
    return COPY2;
  }();
  var MOVE = /* @__PURE__ */ function() {
    function MOVE2() {
    }
    ;
    MOVE2.value = new MOVE2();
    return MOVE2;
  }();
  var LOCK = /* @__PURE__ */ function() {
    function LOCK2() {
    }
    ;
    LOCK2.value = new LOCK2();
    return LOCK2;
  }();
  var UNLOCK = /* @__PURE__ */ function() {
    function UNLOCK2() {
    }
    ;
    UNLOCK2.value = new UNLOCK2();
    return UNLOCK2;
  }();
  var PATCH = /* @__PURE__ */ function() {
    function PATCH2() {
    }
    ;
    PATCH2.value = new PATCH2();
    return PATCH2;
  }();
  var unCustomMethod = function(v) {
    return v;
  };
  var showMethod = {
    show: function(v) {
      if (v instanceof OPTIONS) {
        return "OPTIONS";
      }
      ;
      if (v instanceof GET) {
        return "GET";
      }
      ;
      if (v instanceof HEAD) {
        return "HEAD";
      }
      ;
      if (v instanceof POST) {
        return "POST";
      }
      ;
      if (v instanceof PUT) {
        return "PUT";
      }
      ;
      if (v instanceof DELETE) {
        return "DELETE";
      }
      ;
      if (v instanceof TRACE) {
        return "TRACE";
      }
      ;
      if (v instanceof CONNECT) {
        return "CONNECT";
      }
      ;
      if (v instanceof PROPFIND) {
        return "PROPFIND";
      }
      ;
      if (v instanceof PROPPATCH) {
        return "PROPPATCH";
      }
      ;
      if (v instanceof MKCOL) {
        return "MKCOL";
      }
      ;
      if (v instanceof COPY) {
        return "COPY";
      }
      ;
      if (v instanceof MOVE) {
        return "MOVE";
      }
      ;
      if (v instanceof LOCK) {
        return "LOCK";
      }
      ;
      if (v instanceof UNLOCK) {
        return "UNLOCK";
      }
      ;
      if (v instanceof PATCH) {
        return "PATCH";
      }
      ;
      throw new Error("Failed pattern match at Data.HTTP.Method (line 43, column 1 - line 59, column 23): " + [v.constructor.name]);
    }
  };
  var print = /* @__PURE__ */ either(/* @__PURE__ */ show(showMethod))(unCustomMethod);

  // output/Data.NonEmpty/index.js
  var NonEmpty = /* @__PURE__ */ function() {
    function NonEmpty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NonEmpty2.create = function(value0) {
      return function(value1) {
        return new NonEmpty2(value0, value1);
      };
    };
    return NonEmpty2;
  }();
  var singleton4 = function(dictPlus) {
    var empty11 = empty2(dictPlus);
    return function(a) {
      return new NonEmpty(a, empty11);
    };
  };

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil2() {
    }
    ;
    Nil2.value = new Nil2();
    return Nil2;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons2.create = function(value0) {
      return function(value1) {
        return new Cons2(value0, value1);
      };
    };
    return Cons2;
  }();
  var NonEmptyList = function(x) {
    return x;
  };
  var toList = function(v) {
    return new Cons(v.value0, v.value1);
  };
  var listMap = function(f) {
    var chunkedRevMap = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Cons)) {
            $tco_var_v = new Cons(v1, v);
            $copy_v1 = v1.value1.value1.value1;
            return;
          }
          ;
          var unrolledMap = function(v2) {
            if (v2 instanceof Cons && (v2.value1 instanceof Cons && v2.value1.value1 instanceof Nil)) {
              return new Cons(f(v2.value0), new Cons(f(v2.value1.value0), Nil.value));
            }
            ;
            if (v2 instanceof Cons && v2.value1 instanceof Nil) {
              return new Cons(f(v2.value0), Nil.value);
            }
            ;
            return Nil.value;
          };
          var reverseUnrolledMap = function($copy_v2) {
            return function($copy_v3) {
              var $tco_var_v2 = $copy_v2;
              var $tco_done1 = false;
              var $tco_result2;
              function $tco_loop2(v2, v3) {
                if (v2 instanceof Cons && (v2.value0 instanceof Cons && (v2.value0.value1 instanceof Cons && v2.value0.value1.value1 instanceof Cons))) {
                  $tco_var_v2 = v2.value1;
                  $copy_v3 = new Cons(f(v2.value0.value0), new Cons(f(v2.value0.value1.value0), new Cons(f(v2.value0.value1.value1.value0), v3)));
                  return;
                }
                ;
                $tco_done1 = true;
                return v3;
              }
              ;
              while (!$tco_done1) {
                $tco_result2 = $tco_loop2($tco_var_v2, $copy_v3);
              }
              ;
              return $tco_result2;
            };
          };
          $tco_done = true;
          return reverseUnrolledMap(v)(unrolledMap(v1));
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return chunkedRevMap(Nil.value);
  };
  var functorList = {
    map: listMap
  };
  var foldableList = {
    foldr: function(f) {
      return function(b) {
        var rev3 = function() {
          var go2 = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1) {
                if (v1 instanceof Nil) {
                  $tco_done = true;
                  return v;
                }
                ;
                if (v1 instanceof Cons) {
                  $tco_var_v = new Cons(v1.value0, v);
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [v.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $284 = foldl(foldableList)(flip(f))(b);
        return function($285) {
          return $284(rev3($285));
        };
      };
    },
    foldl: function(f) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b, v) {
            if (v instanceof Nil) {
              $tco_done1 = true;
              return b;
            }
            ;
            if (v instanceof Cons) {
              $tco_var_b = f(b)(v.value0);
              $copy_v = v.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append22 = append(dictMonoid.Semigroup0());
      var mempty3 = mempty(dictMonoid);
      return function(f) {
        return foldl(foldableList)(function(acc) {
          var $286 = append22(acc);
          return function($287) {
            return $286(f($287));
          };
        })(mempty3);
      };
    }
  };
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var semigroupList = {
    append: function(xs) {
      return function(ys) {
        return foldr2(Cons.create)(ys)(xs);
      };
    }
  };
  var append1 = /* @__PURE__ */ append(semigroupList);
  var semigroupNonEmptyList = {
    append: function(v) {
      return function(as$prime) {
        return new NonEmpty(v.value0, append1(v.value1)(toList(as$prime)));
      };
    }
  };
  var altList = {
    alt: append1,
    Functor0: function() {
      return functorList;
    }
  };
  var plusList = /* @__PURE__ */ function() {
    return {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
  }();

  // output/Data.List/index.js
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f) {
    return f();
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg) {
    throw new Error(msg);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg) {
    return unsafePartial(function() {
      return crashWith2(msg);
    });
  };

  // output/Data.List.NonEmpty/index.js
  var singleton5 = /* @__PURE__ */ function() {
    var $200 = singleton4(plusList);
    return function($201) {
      return NonEmptyList($200($201));
    };
  }();
  var head = function(v) {
    return v.value0;
  };

  // output/Data.Nullable/foreign.js
  var nullImpl = null;
  function nullable(a, r, f) {
    return a == null ? r : f(a);
  }
  function notNull(x) {
    return x;
  }

  // output/Data.Nullable/index.js
  var toNullable = /* @__PURE__ */ maybe(nullImpl)(notNull);
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag, _1, _2, _3) {
      this.tag = tag;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }
    function nonCanceler2(error2) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error2) {
        setTimeout(function() {
          throw error2;
        }, 0);
      }
    }
    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error2) {
        return left(error2);
      }
    }
    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error2) {
        k(left(error2))();
        return nonCanceler2;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size5 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size5 !== 0) {
          size5--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb2) {
          var i, tmp;
          if (size5 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size5) % limit] = cb2;
          size5++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count2 = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count2--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count2++;
        },
        isEmpty: function() {
          return count2 === 0;
        },
        killAll: function(killError, cb2) {
          return function() {
            if (count2 === 0) {
              return cb2();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb2();
                  }
                };
              })();
            }
            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }
            fibers = {};
            fiberId = 0;
            count2 = 0;
            return function(error2) {
              return new Aff2(SYNC, function() {
                for (var k2 in kills) {
                  if (kills.hasOwnProperty(k2)) {
                    kills[k2]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step2 = aff;
      var fail3 = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run4(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step2 = bhead(step2);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail3 = util.left(e);
                step2 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step2)) {
                status = RETURN;
                fail3 = step2;
                step2 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step2 = util.fromRight(step2);
              }
              break;
            case CONTINUE:
              switch (step2.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step2._2;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step2 = util.right(step2._1);
                  } else {
                    status = STEP_BIND;
                    step2 = step2._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step2 = runSync(util.left, util.right, step2._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step2 = runAsync(util.left, step2._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step2 = result2;
                        run4(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail3 = util.left(step2._1);
                  step2 = null;
                  break;
                // Enqueue the Catch so that we can call the error handler later on
                // in case of an exception.
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                // Enqueue the Bracket so that we can call the appropriate handlers
                // after resource acquisition.
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step2._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step2._1) {
                    tmp.run();
                  }
                  step2 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step2 = sequential2(util, supervisor, step2._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step2 = interrupt || fail3 || step2;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  // We cannot recover from an unmasked interrupt. Otherwise we should
                  // continue stepping, or run the exception handler if an exception
                  // was raised.
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail3) {
                      status = CONTINUE;
                      step2 = attempt._2(util.fromLeft(fail3));
                      fail3 = null;
                    }
                    break;
                  // We cannot resume from an unmasked interrupt or exception.
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail3) {
                      status = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status = STEP_BIND;
                      step2 = util.fromRight(step2);
                    }
                    break;
                  // If we have a bracket, we should enqueue the handlers,
                  // and continue with the success branch only if the fiber has
                  // not been interrupted. If the bracket acquisition failed, we
                  // should not run either.
                  case BRACKET:
                    bracketCount--;
                    if (fail3 === null) {
                      result = util.fromRight(step2);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step2 = attempt._3(result);
                      }
                    }
                    break;
                  // Enqueue the appropriate handler. We increase the bracket count
                  // because it should not be cancelled.
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail3), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step2 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail3) {
                      step2 = attempt._1.failed(util.fromLeft(fail3))(attempt._2);
                    } else {
                      step2 = attempt._1.completed(util.fromRight(step2))(attempt._2);
                    }
                    fail3 = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail3), attempts, interrupt);
                    status = CONTINUE;
                    step2 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step2 = attempt._1;
                    fail3 = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k in joins) {
                if (joins.hasOwnProperty(k)) {
                  rethrow = rethrow && joins[k].rethrow;
                  runEff(joins[k].handler(step2));
                }
              }
              joins = null;
              if (interrupt && fail3) {
                setTimeout(function() {
                  throw util.fromLeft(fail3);
                }, 0);
              } else if (util.isLeft(step2) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step2);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join6) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join6.rethrow;
            join6.handler(step2)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join6;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error2, cb2) {
        return function() {
          if (status === COMPLETED) {
            cb2(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb2(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error2);
              status = COMPLETED;
              step2 = interrupt;
              run4(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step2(error2)), attempts, interrupt);
                }
                status = RETURN;
                step2 = null;
                fail3 = null;
                run4(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step2 = null;
                fail3 = null;
              }
          }
          return canceler;
        };
      }
      function join5(cb2) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb2
          })();
          if (status === SUSPENDED) {
            run4(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join5,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run4(runTick);
              });
            } else {
              run4(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb2) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root2 = EMPTY;
      function kill(error2, par2, cb3) {
        var step2 = par2;
        var head4 = null;
        var tail3 = null;
        var count2 = 0;
        var kills2 = {};
        var tmp, kid;
        loop: while (true) {
          tmp = null;
          switch (step2.tag) {
            case FORKED:
              if (step2._3 === EMPTY) {
                tmp = fibers[step2._1];
                kills2[count2++] = tmp.kill(error2, function(result) {
                  return function() {
                    count2--;
                    if (count2 === 0) {
                      cb3(result)();
                    }
                  };
                });
              }
              if (head4 === null) {
                break loop;
              }
              step2 = head4._2;
              if (tail3 === null) {
                head4 = null;
              } else {
                head4 = tail3._1;
                tail3 = tail3._2;
              }
              break;
            case MAP:
              step2 = step2._2;
              break;
            case APPLY:
            case ALT:
              if (head4) {
                tail3 = new Aff2(CONS, head4, tail3);
              }
              head4 = step2;
              step2 = step2._1;
              break;
          }
        }
        if (count2 === 0) {
          cb3(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count2;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join5(result, head4, tail3) {
        var fail3, step2, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail3 = result;
          step2 = null;
        } else {
          step2 = result;
          fail3 = null;
        }
        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;
          if (interrupt !== null) {
            return;
          }
          if (head4 === null) {
            cb2(fail3 || step2)();
            return;
          }
          if (head4._3 !== EMPTY) {
            return;
          }
          switch (head4.tag) {
            case MAP:
              if (fail3 === null) {
                head4._3 = util.right(head4._1(util.fromRight(step2)));
                step2 = head4._3;
              } else {
                head4._3 = fail3;
              }
              break;
            case APPLY:
              lhs = head4._1._3;
              rhs = head4._2._3;
              if (fail3) {
                head4._3 = fail3;
                tmp = true;
                kid = killId++;
                kills[kid] = kill(early, fail3 === lhs ? head4._2 : head4._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail3 === null) {
                      join5(fail3, null, null);
                    } else {
                      join5(fail3, tail3._1, tail3._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              } else if (lhs === EMPTY || rhs === EMPTY) {
                return;
              } else {
                step2 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                head4._3 = step2;
              }
              break;
            case ALT:
              lhs = head4._1._3;
              rhs = head4._2._3;
              if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                return;
              }
              if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                fail3 = step2 === lhs ? rhs : lhs;
                step2 = null;
                head4._3 = fail3;
              } else {
                head4._3 = step2;
                tmp = true;
                kid = killId++;
                kills[kid] = kill(early, step2 === lhs ? head4._2 : head4._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail3 === null) {
                      join5(step2, null, null);
                    } else {
                      join5(step2, tail3._1, tail3._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              }
              break;
          }
          if (tail3 === null) {
            head4 = null;
          } else {
            head4 = tail3._1;
            tail3 = tail3._2;
          }
        }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join5(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run4() {
        var status = CONTINUE;
        var step2 = par;
        var head4 = null;
        var tail3 = null;
        var tmp, fid;
        loop: while (true) {
          tmp = null;
          fid = null;
          switch (status) {
            case CONTINUE:
              switch (step2.tag) {
                case MAP:
                  if (head4) {
                    tail3 = new Aff2(CONS, head4, tail3);
                  }
                  head4 = new Aff2(MAP, step2._1, EMPTY, EMPTY);
                  step2 = step2._2;
                  break;
                case APPLY:
                  if (head4) {
                    tail3 = new Aff2(CONS, head4, tail3);
                  }
                  head4 = new Aff2(APPLY, EMPTY, step2._2, EMPTY);
                  step2 = step2._1;
                  break;
                case ALT:
                  if (head4) {
                    tail3 = new Aff2(CONS, head4, tail3);
                  }
                  head4 = new Aff2(ALT, EMPTY, step2._2, EMPTY);
                  step2 = step2._1;
                  break;
                default:
                  fid = fiberId++;
                  status = RETURN;
                  tmp = step2;
                  step2 = new Aff2(FORKED, fid, new Aff2(CONS, head4, tail3), EMPTY);
                  tmp = Fiber(util, supervisor, tmp);
                  tmp.onComplete({
                    rethrow: false,
                    handler: resolve(step2)
                  })();
                  fibers[fid] = tmp;
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
              }
              break;
            case RETURN:
              if (head4 === null) {
                break loop;
              }
              if (head4._1 === EMPTY) {
                head4._1 = step2;
                status = CONTINUE;
                step2 = head4._2;
                head4._2 = EMPTY;
              } else {
                head4._2 = step2;
                step2 = head4;
                if (tail3 === null) {
                  head4 = null;
                } else {
                  head4 = tail3._1;
                  tail3 = tail3._2;
                }
              }
          }
        }
        root2 = step2;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error2, cb3) {
        interrupt = util.left(error2);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error2, root2, cb3);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler2;
            };
          });
        };
      }
      run4();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb2) {
        return function() {
          return runPar(util, supervisor, par, cb2);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler2;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _catchError(aff) {
    return function(k) {
      return Aff.Catch(aff, k);
    };
  }
  function _map(f) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function(value13) {
          return Aff.Pure(f(value13));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k) {
      return Aff.Bind(aff, k);
    };
  }
  var _liftEffect = Aff.Sync;
  var makeAff = Aff.Async;
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _sequential = Aff.Seq;

  // output/Data.Profunctor/index.js
  var profunctorFn = {
    dimap: function(a2b) {
      return function(c2d) {
        return function(b2c) {
          return function($18) {
            return c2d(b2c(a2b($18)));
          };
        };
      };
    }
  };
  var dimap = function(dict) {
    return dict.dimap;
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy3 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var $$void3 = /* @__PURE__ */ $$void(functorEffect);
  var functorAff = {
    map: _map
  };
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v) {
      if (v instanceof Right) {
        return v.value0;
      }
      ;
      if (v instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 412, column 21 - line 414, column 54): " + [v.constructor.name]);
    };
    var unsafeFromLeft = function(v) {
      if (v instanceof Left) {
        return v.value0;
      }
      ;
      if (v instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 20 - line 409, column 55): " + [v.constructor.name]);
    };
    var isLeft = function(v) {
      if (v instanceof Left) {
        return true;
      }
      ;
      if (v instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 12 - line 404, column 21): " + [v.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do3() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var launchAff_ = function($75) {
    return $$void3(launchAff($75));
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy3("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var pure2 = /* @__PURE__ */ pure(applicativeAff);
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadThrowAff = {
    throwError: _throwError,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadErrorAff = {
    catchError: _catchError,
    MonadThrow0: function() {
      return monadThrowAff;
    }
  };
  var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure2(unit));

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn1 = function mkEffectFn12(fn) {
    return function(x) {
      return fn(x)();
    };
  };
  var mkEffectFn2 = function mkEffectFn22(fn) {
    return function(a, b) {
      return fn(a)(b)();
    };
  };
  var mkEffectFn3 = function mkEffectFn32(fn) {
    return function(a, b, c) {
      return fn(a)(b)(c)();
    };
  };
  var runEffectFn1 = function runEffectFn12(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
  var runEffectFn2 = function runEffectFn22(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  // output/Effect.Uncurried/index.js
  var semigroupEffectFn1 = function(dictSemigroup) {
    var append6 = append(semigroupEffect(dictSemigroup));
    return {
      append: function(f1) {
        return function(f2) {
          return mkEffectFn1(function(a) {
            return append6(runEffectFn1(f1)(a))(runEffectFn1(f2)(a));
          });
        };
      }
    };
  };
  var monoidEffectFn1 = function(dictMonoid) {
    var mempty3 = mempty(monoidEffect(dictMonoid));
    var semigroupEffectFn11 = semigroupEffectFn1(dictMonoid.Semigroup0());
    return {
      mempty: mkEffectFn1(function(v) {
        return mempty3;
      }),
      Semigroup0: function() {
        return semigroupEffectFn11;
      }
    };
  };

  // output/Effect.Aff.Compat/index.js
  var fromEffectFnAff = function(v) {
    return makeAff(function(k) {
      return function __do3() {
        var v1 = v(function($9) {
          return k(Left.create($9))();
        }, function($10) {
          return k(Right.create($10))();
        });
        return function(e) {
          return makeAff(function(k2) {
            return function __do4() {
              v1(e, function($11) {
                return k2(Left.create($11))();
              }, function($12) {
                return k2(Right.create($12))();
              });
              return nonCanceler;
            };
          });
        };
      };
    });
  };

  // output/Foreign/foreign.js
  function tagOf(value13) {
    return Object.prototype.toString.call(value13).slice(8, -1);
  }
  var isArray = Array.isArray || function(value13) {
    return Object.prototype.toString.call(value13) === "[object Array]";
  };

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  var floor = Math.floor;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x) {
    if (!isFiniteImpl(x)) {
      return 0;
    }
    ;
    if (x >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
  };
  var floor2 = function($39) {
    return unsafeClamp(floor($39));
  };

  // output/Data.String.CodeUnits/foreign.js
  var fromCharArray = function(a) {
    return a.join("");
  };
  var toCharArray = function(s) {
    return s.split("");
  };
  var singleton6 = function(c) {
    return c;
  };
  var length4 = function(s) {
    return s.length;
  };
  var _indexOf = function(just) {
    return function(nothing) {
      return function(x) {
        return function(s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };
  var drop3 = function(n) {
    return function(s) {
      return s.substring(n);
    };
  };

  // output/Data.String.Unsafe/foreign.js
  var charAt = function(i) {
    return function(s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  // output/Data.String.CodeUnits/index.js
  var indexOf = /* @__PURE__ */ function() {
    return _indexOf(Just.create)(Nothing.value);
  }();
  var contains = function(pat) {
    var $23 = indexOf(pat);
    return function($24) {
      return isJust($23($24));
    };
  };

  // output/Foreign/index.js
  var ForeignError = /* @__PURE__ */ function() {
    function ForeignError2(value0) {
      this.value0 = value0;
    }
    ;
    ForeignError2.create = function(value0) {
      return new ForeignError2(value0);
    };
    return ForeignError2;
  }();
  var TypeMismatch = /* @__PURE__ */ function() {
    function TypeMismatch2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TypeMismatch2.create = function(value0) {
      return function(value1) {
        return new TypeMismatch2(value0, value1);
      };
    };
    return TypeMismatch2;
  }();
  var unsafeToForeign = unsafeCoerce2;
  var unsafeFromForeign = unsafeCoerce2;
  var fail = function(dictMonad) {
    var $153 = throwError(monadThrowExceptT(dictMonad));
    return function($154) {
      return $153(singleton5($154));
    };
  };
  var unsafeReadTagged = function(dictMonad) {
    var pure16 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(tag) {
      return function(value13) {
        if (tagOf(value13) === tag) {
          return pure16(unsafeFromForeign(value13));
        }
        ;
        if (otherwise) {
          return fail1(new TypeMismatch(tag, tagOf(value13)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag.constructor.name, value13.constructor.name]);
      };
    };
  };

  // output/Affjax/index.js
  var pure3 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadIdentity));
  var fail2 = /* @__PURE__ */ fail(monadIdentity);
  var unsafeReadTagged2 = /* @__PURE__ */ unsafeReadTagged(monadIdentity);
  var alt2 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(/* @__PURE__ */ bindExceptT(monadIdentity));
  var map7 = /* @__PURE__ */ map(functorMaybe);
  var any2 = /* @__PURE__ */ any(foldableArray)(heytingAlgebraBoolean);
  var eq3 = /* @__PURE__ */ eq(eqString);
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindMaybe);
  var map1 = /* @__PURE__ */ map(functorArray);
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorAff);
  var $$try2 = /* @__PURE__ */ $$try(monadErrorAff);
  var pure1 = /* @__PURE__ */ pure(applicativeAff);
  var RequestContentError = /* @__PURE__ */ function() {
    function RequestContentError2(value0) {
      this.value0 = value0;
    }
    ;
    RequestContentError2.create = function(value0) {
      return new RequestContentError2(value0);
    };
    return RequestContentError2;
  }();
  var ResponseBodyError = /* @__PURE__ */ function() {
    function ResponseBodyError2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ResponseBodyError2.create = function(value0) {
      return function(value1) {
        return new ResponseBodyError2(value0, value1);
      };
    };
    return ResponseBodyError2;
  }();
  var TimeoutError = /* @__PURE__ */ function() {
    function TimeoutError2() {
    }
    ;
    TimeoutError2.value = new TimeoutError2();
    return TimeoutError2;
  }();
  var RequestFailedError = /* @__PURE__ */ function() {
    function RequestFailedError2() {
    }
    ;
    RequestFailedError2.value = new RequestFailedError2();
    return RequestFailedError2;
  }();
  var XHROtherError = /* @__PURE__ */ function() {
    function XHROtherError2(value0) {
      this.value0 = value0;
    }
    ;
    XHROtherError2.create = function(value0) {
      return new XHROtherError2(value0);
    };
    return XHROtherError2;
  }();
  var request = function(driver2) {
    return function(req) {
      var parseJSON = function(v2) {
        if (v2 === "") {
          return pure3(jsonEmptyObject);
        }
        ;
        return either(function($74) {
          return fail2(ForeignError.create($74));
        })(pure3)(jsonParser(v2));
      };
      var fromResponse = function() {
        if (req.responseFormat instanceof $$ArrayBuffer) {
          return unsafeReadTagged2("ArrayBuffer");
        }
        ;
        if (req.responseFormat instanceof Blob) {
          return unsafeReadTagged2("Blob");
        }
        ;
        if (req.responseFormat instanceof Document) {
          return function(x) {
            return alt2(unsafeReadTagged2("Document")(x))(alt2(unsafeReadTagged2("XMLDocument")(x))(unsafeReadTagged2("HTMLDocument")(x)));
          };
        }
        ;
        if (req.responseFormat instanceof Json) {
          return composeKleisliFlipped2(function($75) {
            return req.responseFormat.value0(parseJSON($75));
          })(unsafeReadTagged2("String"));
        }
        ;
        if (req.responseFormat instanceof $$String) {
          return unsafeReadTagged2("String");
        }
        ;
        if (req.responseFormat instanceof Ignore) {
          return $$const(req.responseFormat.value0(pure3(unit)));
        }
        ;
        throw new Error("Failed pattern match at Affjax (line 274, column 18 - line 283, column 57): " + [req.responseFormat.constructor.name]);
      }();
      var extractContent = function(v2) {
        if (v2 instanceof ArrayView) {
          return new Right(v2.value0(unsafeToForeign));
        }
        ;
        if (v2 instanceof Blob2) {
          return new Right(unsafeToForeign(v2.value0));
        }
        ;
        if (v2 instanceof Document2) {
          return new Right(unsafeToForeign(v2.value0));
        }
        ;
        if (v2 instanceof $$String2) {
          return new Right(unsafeToForeign(v2.value0));
        }
        ;
        if (v2 instanceof FormData) {
          return new Right(unsafeToForeign(v2.value0));
        }
        ;
        if (v2 instanceof FormURLEncoded) {
          return note("Body contains values that cannot be encoded as application/x-www-form-urlencoded")(map7(unsafeToForeign)(encode(v2.value0)));
        }
        ;
        if (v2 instanceof Json2) {
          return new Right(unsafeToForeign(stringify(v2.value0)));
        }
        ;
        throw new Error("Failed pattern match at Affjax (line 235, column 20 - line 250, column 69): " + [v2.constructor.name]);
      };
      var addHeader = function(mh) {
        return function(hs) {
          if (mh instanceof Just && !any2(on(eq3)(name)(mh.value0))(hs)) {
            return snoc(hs)(mh.value0);
          }
          ;
          return hs;
        };
      };
      var headers = function(reqContent) {
        return addHeader(map7(ContentType.create)(bindFlipped3(toMediaType2)(reqContent)))(addHeader(map7(Accept.create)(toMediaType(req.responseFormat)))(req.headers));
      };
      var ajaxRequest = function(v2) {
        return {
          method: print(req.method),
          url: req.url,
          headers: map1(function(h) {
            return {
              field: name(h),
              value: value(h)
            };
          })(headers(req.content)),
          content: v2,
          responseType: toResponseType(req.responseFormat),
          username: toNullable(req.username),
          password: toNullable(req.password),
          withCredentials: req.withCredentials,
          timeout: fromMaybe(0)(map7(function(v1) {
            return v1;
          })(req.timeout))
        };
      };
      var send = function(content3) {
        return mapFlipped2($$try2(fromEffectFnAff(_ajax(driver2, "AffjaxTimeoutErrorMessageIdent", "AffjaxRequestFailedMessageIdent", ResponseHeader.create, ajaxRequest(content3)))))(function(v2) {
          if (v2 instanceof Right) {
            var v1 = runExcept(fromResponse(v2.value0.body));
            if (v1 instanceof Left) {
              return new Left(new ResponseBodyError(head(v1.value0), v2.value0));
            }
            ;
            if (v1 instanceof Right) {
              return new Right({
                headers: v2.value0.headers,
                status: v2.value0.status,
                statusText: v2.value0.statusText,
                body: v1.value0
              });
            }
            ;
            throw new Error("Failed pattern match at Affjax (line 209, column 9 - line 211, column 52): " + [v1.constructor.name]);
          }
          ;
          if (v2 instanceof Left) {
            return new Left(function() {
              var message2 = message(v2.value0);
              var $61 = message2 === "AffjaxTimeoutErrorMessageIdent";
              if ($61) {
                return TimeoutError.value;
              }
              ;
              var $62 = message2 === "AffjaxRequestFailedMessageIdent";
              if ($62) {
                return RequestFailedError.value;
              }
              ;
              return new XHROtherError(v2.value0);
            }());
          }
          ;
          throw new Error("Failed pattern match at Affjax (line 207, column 144 - line 219, column 28): " + [v2.constructor.name]);
        });
      };
      if (req.content instanceof Nothing) {
        return send(toNullable(Nothing.value));
      }
      ;
      if (req.content instanceof Just) {
        var v = extractContent(req.content.value0);
        if (v instanceof Right) {
          return send(toNullable(new Just(v.value0)));
        }
        ;
        if (v instanceof Left) {
          return pure1(new Left(new RequestContentError(v.value0)));
        }
        ;
        throw new Error("Failed pattern match at Affjax (line 199, column 7 - line 203, column 48): " + [v.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Affjax (line 195, column 3 - line 203, column 48): " + [req.content.constructor.name]);
    };
  };
  var defaultRequest = /* @__PURE__ */ function() {
    return {
      method: new Left(GET.value),
      url: "/",
      headers: [],
      content: Nothing.value,
      username: Nothing.value,
      password: Nothing.value,
      withCredentials: false,
      responseFormat: ignore,
      timeout: Nothing.value
    };
  }();
  var get = function(driver2) {
    return function(rf) {
      return function(u) {
        return request(driver2)({
          method: defaultRequest.method,
          headers: defaultRequest.headers,
          content: defaultRequest.content,
          username: defaultRequest.username,
          password: defaultRequest.password,
          withCredentials: defaultRequest.withCredentials,
          timeout: defaultRequest.timeout,
          url: u,
          responseFormat: rf
        });
      };
    };
  };

  // output/Affjax.Web/index.js
  var get2 = /* @__PURE__ */ get(driver);

  // output/Data.String.CodePoints/foreign.js
  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";
  var _unsafeCodePointAt0 = function(fallback) {
    return hasCodePointAt ? function(str) {
      return str.codePointAt(0);
    } : fallback;
  };
  var _codePointAt = function(fallback) {
    return function(Just2) {
      return function(Nothing2) {
        return function(unsafeCodePointAt02) {
          return function(index5) {
            return function(str) {
              var length10 = str.length;
              if (index5 < 0 || index5 >= length10) return Nothing2;
              if (hasStringIterator) {
                var iter = str[Symbol.iterator]();
                for (var i = index5; ; --i) {
                  var o = iter.next();
                  if (o.done) return Nothing2;
                  if (i === 0) return Just2(unsafeCodePointAt02(o.value));
                }
              }
              return fallback(index5)(str);
            };
          };
        };
      };
    };
  };
  var _singleton = function(fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };
  var _take = function(fallback) {
    return function(n) {
      if (hasStringIterator) {
        return function(str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };
  var _toCodePointArray = function(fallback) {
    return function(unsafeCodePointAt02) {
      if (hasArrayFrom) {
        return function(str) {
          return Array.from(str, unsafeCodePointAt02);
        };
      }
      return fallback;
    };
  };

  // output/Data.Enum/foreign.js
  function toCharCode(c) {
    return c.charCodeAt(0);
  }
  function fromCharCode(c) {
    return String.fromCharCode(c);
  }

  // output/Data.Enum/index.js
  var bottom1 = /* @__PURE__ */ bottom(boundedChar);
  var top1 = /* @__PURE__ */ top(boundedChar);
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };
  var toEnumWithDefaults = function(dictBoundedEnum) {
    var toEnum1 = toEnum(dictBoundedEnum);
    var fromEnum1 = fromEnum(dictBoundedEnum);
    var bottom22 = bottom(dictBoundedEnum.Bounded0());
    return function(low2) {
      return function(high2) {
        return function(x) {
          var v = toEnum1(x);
          if (v instanceof Just) {
            return v.value0;
          }
          ;
          if (v instanceof Nothing) {
            var $140 = x < fromEnum1(bottom22);
            if ($140) {
              return low2;
            }
            ;
            return high2;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
        };
      };
    };
  };
  var defaultSucc = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a) {
        return toEnum$prime(fromEnum$prime(a) + 1 | 0);
      };
    };
  };
  var defaultPred = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a) {
        return toEnum$prime(fromEnum$prime(a) - 1 | 0);
      };
    };
  };
  var charToEnum = function(v) {
    if (v >= toCharCode(bottom1) && v <= toCharCode(top1)) {
      return new Just(fromCharCode(v));
    }
    ;
    return Nothing.value;
  };
  var enumChar = {
    succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
    pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
    Ord0: function() {
      return ordChar;
    }
  };
  var boundedEnumChar = /* @__PURE__ */ function() {
    return {
      cardinality: toCharCode(top1) - toCharCode(bottom1) | 0,
      toEnum: charToEnum,
      fromEnum: toCharCode,
      Bounded0: function() {
        return boundedChar;
      },
      Enum1: function() {
        return enumChar;
      }
    };
  }();

  // output/Data.String.CodePoints/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
  var map8 = /* @__PURE__ */ map(functorMaybe);
  var unfoldr2 = /* @__PURE__ */ unfoldr(unfoldableArray);
  var div2 = /* @__PURE__ */ div(euclideanRingInt);
  var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
  var unsurrogate = function(lead) {
    return function(trail) {
      return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
  };
  var isTrail = function(cu) {
    return 56320 <= cu && cu <= 57343;
  };
  var isLead = function(cu) {
    return 55296 <= cu && cu <= 56319;
  };
  var uncons2 = function(s) {
    var v = length4(s);
    if (v === 0) {
      return Nothing.value;
    }
    ;
    if (v === 1) {
      return new Just({
        head: fromEnum2(charAt(0)(s)),
        tail: ""
      });
    }
    ;
    var cu1 = fromEnum2(charAt(1)(s));
    var cu0 = fromEnum2(charAt(0)(s));
    var $43 = isLead(cu0) && isTrail(cu1);
    if ($43) {
      return new Just({
        head: unsurrogate(cu0)(cu1),
        tail: drop3(2)(s)
      });
    }
    ;
    return new Just({
      head: cu0,
      tail: drop3(1)(s)
    });
  };
  var unconsButWithTuple = function(s) {
    return map8(function(v) {
      return new Tuple(v.head, v.tail);
    })(uncons2(s));
  };
  var toCodePointArrayFallback = function(s) {
    return unfoldr2(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function(s) {
    var cu0 = fromEnum2(charAt(0)(s));
    var $47 = isLead(cu0) && length4(s) > 1;
    if ($47) {
      var cu1 = fromEnum2(charAt(1)(s));
      var $48 = isTrail(cu1);
      if ($48) {
        return unsurrogate(cu0)(cu1);
      }
      ;
      return cu0;
    }
    ;
    return cu0;
  };
  var unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length5 = function($74) {
    return length(toCodePointArray($74));
  };
  var fromCharCode2 = /* @__PURE__ */ function() {
    var $75 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
    return function($76) {
      return singleton6($75($76));
    };
  }();
  var singletonFallback = function(v) {
    if (v <= 65535) {
      return fromCharCode2(v);
    }
    ;
    var lead = div2(v - 65536 | 0)(1024) + 55296 | 0;
    var trail = mod2(v - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode2(lead) + fromCharCode2(trail);
  };
  var singleton7 = /* @__PURE__ */ _singleton(singletonFallback);
  var takeFallback = function(v) {
    return function(v1) {
      if (v < 1) {
        return "";
      }
      ;
      var v2 = uncons2(v1);
      if (v2 instanceof Just) {
        return singleton7(v2.value0.head) + takeFallback(v - 1 | 0)(v2.value0.tail);
      }
      ;
      return v1;
    };
  };
  var take3 = /* @__PURE__ */ _take(takeFallback);
  var eqCodePoint = {
    eq: function(x) {
      return function(y) {
        return x === y;
      };
    }
  };
  var codePointAtFallback = function($copy_n) {
    return function($copy_s) {
      var $tco_var_n = $copy_n;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(n, s) {
        var v = uncons2(s);
        if (v instanceof Just) {
          var $66 = n === 0;
          if ($66) {
            $tco_done = true;
            return new Just(v.value0.head);
          }
          ;
          $tco_var_n = n - 1 | 0;
          $copy_s = v.value0.tail;
          return;
        }
        ;
        $tco_done = true;
        return Nothing.value;
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_n, $copy_s);
      }
      ;
      return $tco_result;
    };
  };
  var codePointAt = function(v) {
    return function(v1) {
      if (v < 0) {
        return Nothing.value;
      }
      ;
      if (v === 0 && v1 === "") {
        return Nothing.value;
      }
      ;
      if (v === 0) {
        return new Just(unsafeCodePointAt0(v1));
      }
      ;
      return _codePointAt(codePointAtFallback)(Just.create)(Nothing.value)(unsafeCodePointAt0)(v)(v1);
    };
  };

  // output/Data.Compactable/index.js
  var $$void4 = /* @__PURE__ */ $$void(functorST);
  var pure12 = /* @__PURE__ */ pure(applicativeST);
  var apply4 = /* @__PURE__ */ apply2(applyST);
  var map9 = /* @__PURE__ */ map(functorST);
  var compactableArray = {
    compact: function(xs) {
      return function __do3() {
        var result = newSTArray();
        var iter = iterator(function(v) {
          return index(xs)(v);
        })();
        iterate(iter)(function($108) {
          return $$void4(function(v) {
            if (v instanceof Nothing) {
              return pure12(0);
            }
            ;
            if (v instanceof Just) {
              return push(v.value0)(result);
            }
            ;
            throw new Error("Failed pattern match at Data.Compactable (line 111, column 34 - line 113, column 35): " + [v.constructor.name]);
          }($108));
        })();
        return unsafeFreeze(result)();
      }();
    },
    separate: function(xs) {
      return function __do3() {
        var ls = newSTArray();
        var rs = newSTArray();
        var iter = iterator(function(v) {
          return index(xs)(v);
        })();
        iterate(iter)(function($109) {
          return $$void4(function(v) {
            if (v instanceof Left) {
              return push(v.value0)(ls);
            }
            ;
            if (v instanceof Right) {
              return push(v.value0)(rs);
            }
            ;
            throw new Error("Failed pattern match at Data.Compactable (line 122, column 34 - line 124, column 31): " + [v.constructor.name]);
          }($109));
        })();
        return apply4(map9(function(v) {
          return function(v1) {
            return {
              left: v,
              right: v1
            };
          };
        })(unsafeFreeze(ls)))(unsafeFreeze(rs))();
      }();
    }
  };
  var compact = function(dict) {
    return dict.compact;
  };

  // output/Deku.Do/index.js
  var bind2 = function(f) {
    return function(a) {
      return f(a);
    };
  };

  // output/Data.CatQueue/index.js
  var CatQueue = /* @__PURE__ */ function() {
    function CatQueue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatQueue2.create = function(value0) {
      return function(value1) {
        return new CatQueue2(value0, value1);
      };
    };
    return CatQueue2;
  }();
  var uncons3 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
        $tco_done = true;
        return Nothing.value;
      }
      ;
      if (v.value0 instanceof Nil) {
        $copy_v = new CatQueue(reverse2(v.value1), Nil.value);
        return;
      }
      ;
      if (v.value0 instanceof Cons) {
        $tco_done = true;
        return new Just(new Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
      }
      ;
      throw new Error("Failed pattern match at Data.CatQueue (line 82, column 1 - line 82, column 63): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var snoc3 = function(v) {
    return function(a) {
      return new CatQueue(v.value0, new Cons(a, v.value1));
    };
  };
  var $$null = function(v) {
    if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
      return true;
    }
    ;
    return false;
  };
  var empty4 = /* @__PURE__ */ function() {
    return new CatQueue(Nil.value, Nil.value);
  }();

  // output/Data.CatList/index.js
  var CatNil = /* @__PURE__ */ function() {
    function CatNil2() {
    }
    ;
    CatNil2.value = new CatNil2();
    return CatNil2;
  }();
  var CatCons = /* @__PURE__ */ function() {
    function CatCons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatCons2.create = function(value0) {
      return function(value1) {
        return new CatCons2(value0, value1);
      };
    };
    return CatCons2;
  }();
  var link = function(v) {
    return function(v1) {
      if (v instanceof CatNil) {
        return v1;
      }
      ;
      if (v1 instanceof CatNil) {
        return v;
      }
      ;
      if (v instanceof CatCons) {
        return new CatCons(v.value0, snoc3(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.CatList (line 108, column 1 - line 108, column 54): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var foldr3 = function(k) {
    return function(b) {
      return function(q) {
        var foldl4 = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1, v2) {
                if (v2 instanceof Nil) {
                  $tco_done = true;
                  return v1;
                }
                ;
                if (v2 instanceof Cons) {
                  $tco_var_v = v;
                  $tco_var_v1 = v(v1)(v2.value0);
                  $copy_v2 = v2.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 124, column 3 - line 124, column 59): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        var go2 = function($copy_xs) {
          return function($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
              var v = uncons3(xs);
              if (v instanceof Nothing) {
                $tco_done1 = true;
                return foldl4(function(x) {
                  return function(i) {
                    return i(x);
                  };
                })(b)(ys);
              }
              ;
              if (v instanceof Just) {
                $tco_var_xs = v.value0.value1;
                $copy_ys = new Cons(k(v.value0.value0), ys);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.CatList (line 120, column 14 - line 122, column 67): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            }
            ;
            return $tco_result;
          };
        };
        return go2(q)(Nil.value);
      };
    };
  };
  var uncons4 = function(v) {
    if (v instanceof CatNil) {
      return Nothing.value;
    }
    ;
    if (v instanceof CatCons) {
      return new Just(new Tuple(v.value0, function() {
        var $66 = $$null(v.value1);
        if ($66) {
          return CatNil.value;
        }
        ;
        return foldr3(link)(CatNil.value)(v.value1);
      }()));
    }
    ;
    throw new Error("Failed pattern match at Data.CatList (line 99, column 1 - line 99, column 61): " + [v.constructor.name]);
  };
  var empty5 = /* @__PURE__ */ function() {
    return CatNil.value;
  }();
  var append2 = link;
  var semigroupCatList = {
    append: append2
  };
  var snoc4 = function(cat) {
    return function(a) {
      return append2(cat)(new CatCons(a, empty4));
    };
  };

  // output/Control.Monad.Free/index.js
  var $runtime_lazy4 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var append3 = /* @__PURE__ */ append(semigroupCatList);
  var Free = /* @__PURE__ */ function() {
    function Free2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Free2.create = function(value0) {
      return function(value1) {
        return new Free2(value0, value1);
      };
    };
    return Free2;
  }();
  var Return = /* @__PURE__ */ function() {
    function Return2(value0) {
      this.value0 = value0;
    }
    ;
    Return2.create = function(value0) {
      return new Return2(value0);
    };
    return Return2;
  }();
  var Bind = /* @__PURE__ */ function() {
    function Bind2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bind2.create = function(value0) {
      return function(value1) {
        return new Bind2(value0, value1);
      };
    };
    return Bind2;
  }();
  var toView = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      var runExpF = function(v22) {
        return v22;
      };
      var concatF = function(v22) {
        return function(r) {
          return new Free(v22.value0, append3(v22.value1)(r));
        };
      };
      if (v.value0 instanceof Return) {
        var v2 = uncons4(v.value1);
        if (v2 instanceof Nothing) {
          $tco_done = true;
          return new Return(v.value0.value0);
        }
        ;
        if (v2 instanceof Just) {
          $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
          return;
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
      }
      ;
      if (v.value0 instanceof Bind) {
        $tco_done = true;
        return new Bind(v.value0.value0, function(a) {
          return concatF(v.value0.value1(a))(v.value1);
        });
      }
      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var resume$prime = function(k) {
    return function(j) {
      return function(f) {
        var v = toView(f);
        if (v instanceof Return) {
          return j(v.value0);
        }
        ;
        if (v instanceof Bind) {
          return k(v.value0)(v.value1);
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [v.constructor.name]);
      };
    };
  };
  var resume = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return resume$prime(function(g) {
      return function(i) {
        return new Left(map111(i)(g));
      };
    })(Right.create);
  };
  var fromView = function(f) {
    return new Free(f, empty5);
  };
  var freeMonad = {
    Applicative0: function() {
      return freeApplicative;
    },
    Bind1: function() {
      return freeBind;
    }
  };
  var freeFunctor = {
    map: function(k) {
      return function(f) {
        return bindFlipped(freeBind)(function() {
          var $189 = pure(freeApplicative);
          return function($190) {
            return $189(k($190));
          };
        }())(f);
      };
    }
  };
  var freeBind = {
    bind: function(v) {
      return function(k) {
        return new Free(v.value0, snoc4(v.value1)(k));
      };
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var freeApplicative = {
    pure: function($191) {
      return fromView(Return.create($191));
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var $lazy_freeApply = /* @__PURE__ */ $runtime_lazy4("freeApply", "Control.Monad.Free", function() {
    return {
      apply: ap(freeMonad),
      Functor0: function() {
        return freeFunctor;
      }
    };
  });
  var pure4 = /* @__PURE__ */ pure(freeApplicative);
  var liftF = function(f) {
    return fromView(new Bind(f, function($192) {
      return pure4($192);
    }));
  };

  // output/Deku.Internal.Ancestry/index.js
  var show2 = /* @__PURE__ */ show(showInt);
  var Element = /* @__PURE__ */ function() {
    function Element3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Element3.create = function(value0) {
      return function(value1) {
        return new Element3(value0, value1);
      };
    };
    return Element3;
  }();
  var Dyn = /* @__PURE__ */ function() {
    function Dyn2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Dyn2.create = function(value0) {
      return function(value1) {
        return new Dyn2(value0, value1);
      };
    };
    return Dyn2;
  }();
  var Root = /* @__PURE__ */ function() {
    function Root2() {
    }
    ;
    Root2.value = new Root2();
    return Root2;
  }();
  var RealAncestry = /* @__PURE__ */ function() {
    function RealAncestry2(value0) {
      this.value0 = value0;
    }
    ;
    RealAncestry2.create = function(value0) {
      return new RealAncestry2(value0);
    };
    return RealAncestry2;
  }();
  var FakeAncestry = /* @__PURE__ */ function() {
    function FakeAncestry2(value0) {
      this.value0 = value0;
    }
    ;
    FakeAncestry2.create = function(value0) {
      return new FakeAncestry2(value0);
    };
    return FakeAncestry2;
  }();
  var root = /* @__PURE__ */ function() {
    return new RealAncestry({
      rep: "",
      lineage: Root.value,
      hasElementParent: false
    });
  }();
  var hasElementParent = function(v) {
    if (v instanceof RealAncestry) {
      return v.value0.hasElementParent;
    }
    ;
    if (v instanceof FakeAncestry) {
      return contains("e")(v.value0.rep);
    }
    ;
    throw new Error("Failed pattern match at Deku.Internal.Ancestry (line 110, column 1 - line 110, column 40): " + [v.constructor.name]);
  };
  var element = function(v) {
    return function(v1) {
      if (v1 instanceof RealAncestry) {
        return new RealAncestry({
          rep: v1.value0.rep + ("e" + show2(v)),
          lineage: new Element(v, v1.value0.lineage),
          hasElementParent: true
        });
      }
      ;
      if (v1 instanceof FakeAncestry) {
        return new FakeAncestry({
          rep: v1.value0.rep + ("e" + show2(v))
        });
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Ancestry (line 120, column 1 - line 120, column 39): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var dyn = function(v) {
    return function(v1) {
      if (v1 instanceof RealAncestry) {
        return new RealAncestry({
          rep: v1.value0.rep + ("d" + show2(v)),
          lineage: new Dyn(v, v1.value0.lineage),
          hasElementParent: false
        });
      }
      ;
      if (v1 instanceof FakeAncestry) {
        return new FakeAncestry({
          rep: v1.value0.rep + ("d" + show2(v))
        });
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Ancestry (line 129, column 1 - line 129, column 35): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  // output/Deku.Internal.Entities/index.js
  var toDekuText = unsafeCoerce2;
  var toDekuElement = unsafeCoerce2;
  var fromDekuText = unsafeCoerce2;
  var fromDekuElement = unsafeCoerce2;

  // output/FRP.Event/foreign.js
  var fastForeachThunkST = (as) => {
    for (var i = 0, l = as.length; i < l; i++) {
      as[i]();
    }
  };
  var fastForeachE = (as, f) => {
    for (var i = 0, l = as.length; i < l; i++) {
      f(as[i]);
    }
  };
  var objHack = (tag) => () => {
    return { r: false, q: [], m: [{}], tag };
  };
  var insertObjHack = (k, v, o) => {
    o.m[o.m.length - 1][k] = v;
  };
  var deleteObjHack = (k, o) => {
    for (const m of o.m) {
      if (delete m[k]) {
        return true;
      }
    }
    return false;
  };
  var run3 = (o, M, f, i) => {
    o.m.push({});
    for (const kv of Object.entries(o.m[i])) {
      const k = kv[0];
      const v = kv[1];
      f(v);
      if (Object.keys(o.m[i + 1]).length) run3(o, M, f, i + 1);
      o.m[i + 1] = {};
      o.m.length = i + 1 + 1;
      M[k] = v;
    }
  };
  var fastForeachOhE = (o, ff2) => {
    let f = ff2;
    while (true) {
      if (o.r) {
        o.q.push(f);
        return;
      }
      o.r = true;
      const M = {};
      run3(o, M, f, 0);
      o.m.length = 0;
      o.m.push(M);
      o.r = false;
      f = o.q.shift();
      if (f == void 0) {
        break;
      }
    }
  };

  // output/Data.Filterable/index.js
  var append4 = /* @__PURE__ */ append(semigroupArray);
  var foldl3 = /* @__PURE__ */ foldl(foldableArray);
  var maybeBool = function(p) {
    return function(x) {
      var $66 = p(x);
      if ($66) {
        return new Just(x);
      }
      ;
      return Nothing.value;
    };
  };
  var filterableArray = {
    partitionMap: function(p) {
      var go2 = function(acc) {
        return function(x) {
          var v = p(x);
          if (v instanceof Left) {
            return {
              right: acc.right,
              left: append4(acc.left)([v.value0])
            };
          }
          ;
          if (v instanceof Right) {
            return {
              left: acc.left,
              right: append4(acc.right)([v.value0])
            };
          }
          ;
          throw new Error("Failed pattern match at Data.Filterable (line 149, column 16 - line 151, column 50): " + [v.constructor.name]);
        };
      };
      return foldl3(go2)({
        left: [],
        right: []
      });
    },
    partition,
    filterMap: mapMaybe,
    filter,
    Compactable0: function() {
      return compactableArray;
    },
    Functor1: function() {
      return functorArray;
    }
  };
  var filterMap = function(dict) {
    return dict.filterMap;
  };
  var eitherBool = function(p) {
    return function(x) {
      var $84 = p(x);
      if ($84) {
        return new Right(x);
      }
      ;
      return new Left(x);
    };
  };

  // output/FRP.Event.Class/index.js
  var sampleOnRight = function(dict) {
    return dict.sampleOnRight;
  };
  var sampleOnRightOp = function(dictIsEvent) {
    var sampleOnRight12 = sampleOnRight(dictIsEvent);
    var map111 = map(dictIsEvent.Filterable2().Functor1());
    return function(ef) {
      return function(ea) {
        return sampleOnRight12(ef)(map111(applyFlipped)(ea));
      };
    };
  };
  var sampleOnLeft = function(dict) {
    return dict.sampleOnLeft;
  };
  var once = function(dict) {
    return dict.once;
  };
  var keepLatest = function(dict) {
    return dict.keepLatest;
  };
  var fix = function(dict) {
    return dict.fix;
  };

  // output/FRP.Event/index.js
  var liftST2 = /* @__PURE__ */ liftST(monadSTEffect);
  var map10 = /* @__PURE__ */ map(functorST);
  var $$void5 = /* @__PURE__ */ $$void(functorEffect);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var pure5 = /* @__PURE__ */ pure(applicativeST);
  var void1 = /* @__PURE__ */ $$void(functorST);
  var join2 = /* @__PURE__ */ join(bindST);
  var pure13 = /* @__PURE__ */ pure(applicativeEffect);
  var liftST1 = /* @__PURE__ */ liftST(monadSTST);
  var resume2 = /* @__PURE__ */ resume(/* @__PURE__ */ functorCompose(functorST)(functorTuple));
  var tailRecM3 = /* @__PURE__ */ tailRecM(monadRecEffect);
  var mempty2 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffectFn1(monoidUnit));
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorST);
  var apply5 = /* @__PURE__ */ apply2(applyST);
  var subscribeO = function(v, k) {
    return liftST2(map10(liftST2)(function() {
      return v(false, k);
    }))();
  };
  var subscribe = function(v) {
    return function(k) {
      return liftST2(map10(liftST2)(function() {
        return v(false, mkEffectFn1(k));
      }));
    };
  };
  var sampleOnRight2 = function(v) {
    return function(v1) {
      return function(b, k) {
        var latest = newSTRef(Nothing.value)();
        var c1 = v(b, function(a) {
          return $$void5(liftST2(write2(new Just(a))(latest)))();
        });
        var c2 = v1(b, function(f) {
          var o = liftST2(read2(latest))();
          return for_2(o)(function(a) {
            return function() {
              return k(f(a));
            };
          })();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var sampleOnLeft2 = function(v) {
    return function(v1) {
      return function(b, k) {
        var latest = newSTRef(Nothing.value)();
        var c1 = v(b, function(a) {
          var o = liftST2(read2(latest))();
          return for_2(o)(function(f) {
            return function() {
              return k(f(a));
            };
          })();
        });
        var c2 = v1(b, function(f) {
          return liftST2(void1(write2(new Just(f))(latest)))();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var once2 = function(v) {
    return function(b, k) {
      var latest = newSTRef(Nothing.value)();
      var u = newSTRef(pure5(unit))();
      var c = v(b, function(a) {
        var o2 = liftST2(read2(latest))();
        if (o2 instanceof Nothing) {
          $$void5(liftST2(write2(new Just(a))(latest)))();
          k(a);
          return liftST2(join2(read2(u)))();
        }
        ;
        if (o2 instanceof Just) {
          return unit;
        }
        ;
        throw new Error("Failed pattern match at FRP.Event (line 189, column 9 - line 195, column 30): " + [o2.constructor.name]);
      });
      void1(write2(c)(u))();
      var o = liftST1(read2(latest))();
      (function() {
        if (o instanceof Just) {
          return c();
        }
        ;
        return unit;
      })();
      return c;
    };
  };
  var makeEvent = function(i) {
    return function(tf, k) {
      return i(function(v) {
        return function(kx) {
          return function __do3() {
            var c = v(tf, function(ii) {
              var go2 = function($163) {
                return function(v1) {
                  if (v1 instanceof Right) {
                    return pure13(new Done(unit));
                  }
                  ;
                  if (v1 instanceof Left) {
                    return function __do4() {
                      var v2 = liftST2(v1.value0)();
                      fastForeachE(v2.value0, k);
                      return new Loop(v2.value1);
                    };
                  }
                  ;
                  throw new Error("Failed pattern match at FRP.Event (line 347, column 25 - line 352, column 29): " + [v1.constructor.name]);
                }(resume2($163));
              };
              return tailRecM3(go2)(kx(ii))();
            });
            return c;
          };
        };
      })();
    };
  };
  var keepLatest2 = function(v) {
    return function(tf, k) {
      var cancelInner = newSTRef(pure5(unit))();
      var cancelOuter = v(tf, function(v1) {
        return liftST2(function __do3() {
          var ci = read2(cancelInner)();
          ci();
          var c = v1(tf, k);
          return void1(liftST1(write2(c)(cancelInner)))();
        })();
      });
      return function __do3() {
        var ci = read2(cancelInner)();
        ci();
        return cancelOuter();
      };
    };
  };
  var justOneM = function(a) {
    return liftF(mapFlipped3(a)(function(a$prime) {
      return new Tuple([a$prime], unit);
    }));
  };
  var justOne = function(a) {
    return liftF(pure5(new Tuple([a], unit)));
  };
  var justNone = function(st) {
    return liftF(mapFlipped3(st)(function(st$prime) {
      return new Tuple([], st$prime);
    }));
  };
  var justManyM = function(a) {
    return liftF(mapFlipped3(a)(function(a$prime) {
      return new Tuple(a$prime, unit);
    }));
  };
  var justMany = function(a) {
    return liftF(pure5(new Tuple(a, unit)));
  };
  var functorEvent = {
    map: function(f) {
      return function(v) {
        return function(b, k) {
          return v(b, function(a) {
            return k(f(a));
          });
        };
      };
    }
  };
  var map12 = /* @__PURE__ */ map(functorEvent);
  var filter3 = function(p) {
    return function(v) {
      return function(tf, k) {
        return v(tf, function(a) {
          var v1 = p(a);
          if (v1 instanceof Just) {
            return k(v1.value0);
          }
          ;
          if (v1 instanceof Nothing) {
            return unit;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 210, column 31 - line 212, column 35): " + [v1.constructor.name]);
        });
      };
    };
  };
  var filter$prime = function(f) {
    return filter3(function(a) {
      var v = f(a);
      if (v) {
        return new Just(a);
      }
      ;
      if (!v) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at FRP.Event (line 116, column 13 - line 118, column 25): " + [v.constructor.name]);
    });
  };
  var fastForeachST = fastForeachE;
  var merge = function(f) {
    return function(tf, k) {
      var a = newSTArray();
      fastForeachST(f, function(v) {
        var u = v(tf, k);
        return void1(liftST1(push(u)(a)))();
      });
      return function __do3() {
        var o = liftST1(freeze(a))();
        return fastForeachThunkST(o);
      };
    };
  };
  var mergeMap = function(f0) {
    return function(f) {
      return function(tf, k) {
        var a = newSTArray();
        fastForeachST(f, function(x) {
          var v = f0(x);
          var u = v(tf, k);
          return void1(liftST1(push(u)(a)))();
        });
        return function __do3() {
          var o = liftST1(freeze(a))();
          return fastForeachThunkST(o);
        };
      };
    };
  };
  var create_ = function(tag) {
    return function __do3() {
      var subscribers = objHack(tag)();
      var idx = newSTRef(0)();
      return {
        event: function(v, k) {
          var rk = newSTRef(k)();
          var ix = read2(idx)();
          insertObjHack(ix, rk, subscribers);
          void1(modify(function(v1) {
            return v1 + 1 | 0;
          })(idx))();
          return function __do4() {
            void1(write2(mempty2)(rk))();
            deleteObjHack(ix, subscribers);
            return unit;
          };
        },
        push: function(a) {
          return function() {
            return fastForeachOhE(subscribers, function(rk) {
              var k = liftST2(read2(rk))();
              return k(a);
            });
          };
        }
      };
    };
  };
  var createPure = /* @__PURE__ */ create_("");
  var create = /* @__PURE__ */ create_("");
  var fix2 = function(f) {
    return function(tf, k) {
      var v = create();
      var v1 = f(v.event);
      var c2 = v.event(tf, k);
      var c1 = v1(tf, mkEffectFn1(v.push));
      return function __do3() {
        c1();
        return c2();
      };
    };
  };
  var memoize = function(e) {
    return function __do3() {
      var v = liftST2(create)();
      var unsubscribe = subscribe(e)(v.push)();
      return {
        event: v.event,
        unsubscribe
      };
    };
  };
  var compactableEvent = {
    compact: /* @__PURE__ */ filter3(/* @__PURE__ */ identity(categoryFn)),
    separate: function(xs) {
      return {
        left: filter3(function(v) {
          if (v instanceof Left) {
            return new Just(v.value0);
          }
          ;
          if (v instanceof Right) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 99, column 13 - line 101, column 33): " + [v.constructor.name]);
        })(xs),
        right: filter3(function(v) {
          if (v instanceof Right) {
            return new Just(v.value0);
          }
          ;
          if (v instanceof Left) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 106, column 13 - line 108, column 32): " + [v.constructor.name]);
        })(xs)
      };
    }
  };
  var filterableEvent = {
    filter: filter$prime,
    filterMap: filter3,
    partition: function(p) {
      return function(xs) {
        return {
          yes: filter$prime(p)(xs),
          no: filter$prime(function($164) {
            return !p($164);
          })(xs)
        };
      };
    },
    partitionMap: function(f) {
      return function(xs) {
        return {
          left: filterMap(filterableEvent)(function() {
            var $165 = either(Just.create)($$const(Nothing.value));
            return function($166) {
              return $165(f($166));
            };
          }())(xs),
          right: filterMap(filterableEvent)(function($167) {
            return hush(f($167));
          })(xs)
        };
      };
    },
    Compactable0: function() {
      return compactableEvent;
    },
    Functor1: function() {
      return functorEvent;
    }
  };
  var biSampleOn = function(v) {
    return function(v1) {
      return function(tf, k) {
        var latest1 = newSTRef(Nothing.value)();
        var latest2 = newSTRef(Nothing.value)();
        var c1 = v(tf, function(a) {
          $$void5(liftST2(write2(new Just(a))(latest1)))();
          var res = liftST2(read2(latest2))();
          return for_2(res)(function(f) {
            return function() {
              return k(f(a));
            };
          })();
        });
        var c2 = v1(tf, function(f) {
          $$void5(liftST2(write2(new Just(f))(latest2)))();
          var res = liftST2(read2(latest1))();
          return for_2(res)(function(a) {
            return function() {
              return k(f(a));
            };
          })();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var applyEvent = {
    apply: function(a) {
      return function(b) {
        return biSampleOn(a)(map12(applyFlipped)(b));
      };
    },
    Functor0: function() {
      return functorEvent;
    }
  };
  var altEvent = {
    alt: function(v) {
      return function(v1) {
        return function(tf, k) {
          return apply5(map10(function(v2) {
            return function(v3) {
              return function __do3() {
                v2();
                return v3();
              };
            };
          })(function() {
            return v(tf, k);
          }))(function() {
            return v1(tf, k);
          })();
        };
      };
    },
    Functor0: function() {
      return functorEvent;
    }
  };
  var plusEvent = {
    empty: function(v, v1) {
      return pure5(unit);
    },
    Alt0: function() {
      return altEvent;
    }
  };
  var eventIsEvent = {
    keepLatest: keepLatest2,
    sampleOnRight: sampleOnRight2,
    sampleOnLeft: sampleOnLeft2,
    fix: fix2,
    once: once2,
    Plus0: function() {
      return plusEvent;
    },
    Alt1: function() {
      return altEvent;
    },
    Filterable2: function() {
      return filterableEvent;
    }
  };

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name16, value13) {
    if (typeof window !== "undefined") {
      var ty = window[name16];
      if (ty != null && value13 instanceof ty) {
        return just(value13);
      }
    }
    var obj = value13;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name16) {
        return just(value13);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name16) {
    return function(value13) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name16, value13);
    };
  };

  // output/Web.HTML.HTMLButtonElement/foreign.js
  function setDisabled(disabled10) {
    return function(button2) {
      return function() {
        button2.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLButtonElement/index.js
  var fromElement = /* @__PURE__ */ unsafeReadProtoTagged("HTMLButtonElement");

  // output/Web.HTML.HTMLDocument/foreign.js
  function _body(doc) {
    return doc.body;
  }

  // output/Web.HTML.HTMLDocument/index.js
  var map11 = /* @__PURE__ */ map(functorEffect);
  var toParentNode = unsafeCoerce2;
  var body = function(doc) {
    return map11(toMaybe)(function() {
      return _body(doc);
    });
  };

  // output/Web.HTML.HTMLElement/foreign.js
  function _read(nothing, just, value13) {
    var tag = Object.prototype.toString.call(value13);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value13);
    } else {
      return nothing;
    }
  }
  function focus(elt) {
    return function() {
      return elt.focus();
    };
  }

  // output/Web.HTML.HTMLElement/index.js
  var toElement = unsafeCoerce2;
  var fromElement2 = function(x) {
    return _read(Nothing.value, Just.create, x);
  };

  // output/Web.HTML.HTMLFieldSetElement/foreign.js
  function setDisabled2(disabled10) {
    return function(fieldset) {
      return function() {
        fieldset.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLFieldSetElement/index.js
  var fromElement3 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLFieldSetElement");

  // output/Web.HTML.HTMLInputElement/foreign.js
  function setChecked(checked2) {
    return function(input) {
      return function() {
        input.checked = checked2;
      };
    };
  }
  function setDisabled3(disabled10) {
    return function(input) {
      return function() {
        input.disabled = disabled10;
      };
    };
  }
  function setValue3(value13) {
    return function(input) {
      return function() {
        input.value = value13;
      };
    };
  }

  // output/Web.HTML.HTMLInputElement/index.js
  var fromElement4 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLInputElement");

  // output/Web.HTML.HTMLKeygenElement/foreign.js
  function setDisabled4(disabled10) {
    return function(keygen) {
      return function() {
        keygen.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLKeygenElement/index.js
  var fromElement5 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLKeygenElement");

  // output/Web.HTML.HTMLLinkElement/foreign.js
  function setDisabled5(disabled10) {
    return function(link2) {
      return function() {
        link2.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLLinkElement/index.js
  var fromElement6 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLLinkElement");

  // output/Web.HTML.HTMLOptGroupElement/foreign.js
  function setDisabled6(disabled10) {
    return function(optgroup) {
      return function() {
        optgroup.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLOptGroupElement/index.js
  var fromElement7 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLOptGroupElement");

  // output/Web.HTML.HTMLOptionElement/foreign.js
  function setDisabled7(disabled10) {
    return function(option) {
      return function() {
        option.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLOptionElement/index.js
  var fromElement8 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLOptionElement");

  // output/Web.HTML.HTMLSelectElement/foreign.js
  function setDisabled8(disabled10) {
    return function(select3) {
      return function() {
        select3.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLSelectElement/index.js
  var fromElement9 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLSelectElement");

  // output/Web.HTML.HTMLTextAreaElement/foreign.js
  function setDisabled9(disabled10) {
    return function(textarea2) {
      return function() {
        textarea2.disabled = disabled10;
      };
    };
  }
  function setValue11(value13) {
    return function(textarea2) {
      return function() {
        textarea2.value = value13;
      };
    };
  }

  // output/Web.HTML.HTMLTextAreaElement/index.js
  var fromElement10 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLTextAreaElement");

  // output/Web.HTML.Window/foreign.js
  function document2(window2) {
    return function() {
      return window2.document;
    };
  }

  // output/FRP.Poll.Unoptimized/index.js
  var pure6 = /* @__PURE__ */ pure(applicativeST);
  var identity7 = /* @__PURE__ */ identity(categoryFn);
  var oneOf2 = /* @__PURE__ */ oneOf(foldableArray);
  var empty6 = /* @__PURE__ */ empty2(plusMaybe);
  var join3 = /* @__PURE__ */ join(bindST);
  var when2 = /* @__PURE__ */ when(applicativeST);
  var once1 = /* @__PURE__ */ once(eventIsEvent);
  var $$void6 = /* @__PURE__ */ $$void(functorST);
  var sampleOnRightOp2 = /* @__PURE__ */ sampleOnRightOp(eventIsEvent);
  var composeFlipped2 = /* @__PURE__ */ composeFlipped(semigroupoidFn);
  var map13 = /* @__PURE__ */ map(functorMaybe);
  var liftST3 = /* @__PURE__ */ liftST(monadSTST);
  var map22 = /* @__PURE__ */ map(functorArray);
  var APoll = function(x) {
    return x;
  };
  var KeepLatestStart = /* @__PURE__ */ function() {
    function KeepLatestStart2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    KeepLatestStart2.create = function(value0) {
      return function(value1) {
        return new KeepLatestStart2(value0, value1);
      };
    };
    return KeepLatestStart2;
  }();
  var KeepLatestLast = /* @__PURE__ */ function() {
    function KeepLatestLast2(value0) {
      this.value0 = value0;
    }
    ;
    KeepLatestLast2.create = function(value0) {
      return new KeepLatestLast2(value0);
    };
    return KeepLatestLast2;
  }();
  var pollable = function(dictIsEvent) {
    return {
      sample: function(v) {
        return function(ab) {
          return v(ab);
        };
      }
    };
  };
  var pollable1 = /* @__PURE__ */ pollable(eventIsEvent);
  var sample = function(dict) {
    return dict.sample;
  };
  var sample1 = /* @__PURE__ */ sample(pollable1);
  var poll = APoll;
  var sham = function(dictIsEvent) {
    var sampleOnLeft12 = sampleOnLeft(dictIsEvent);
    return function(i) {
      return poll(function(e) {
        return sampleOnLeft12(i)(e);
      });
    };
  };
  var stRefToPoll = function(r) {
    return poll(function(e) {
      return makeEvent(function(s) {
        return s(e)(function(f) {
          return justOneM(function __do3() {
            var i = read2(r)();
            return f(i);
          });
        });
      });
    });
  };
  var once3 = function(dictPollable) {
    var sample23 = sample(dictPollable);
    return function(dictIsEvent) {
      var once22 = once(dictIsEvent);
      return function(a) {
        return poll(function(e) {
          return once22(sample23(a)(e));
        });
      };
    };
  };
  var merge2 = function(a) {
    return function(e) {
      return mergeMap(flip(sample1)(e))(a);
    };
  };
  var functorAPoll = function(dictFunctor) {
    var map34 = map(dictFunctor);
    return {
      map: function(f) {
        return function(v) {
          return function(e) {
            return v(map34(function(v1) {
              return function($472) {
                return v1(f($472));
              };
            })(e));
          };
        };
      }
    };
  };
  var sampleBy = function(dictPollable) {
    var sample23 = sample(dictPollable);
    return function(dictFunctor) {
      var map34 = map(functorAPoll(dictFunctor));
      return function(dictFunctor1) {
        var map42 = map(dictFunctor1);
        return function(f) {
          return function(b) {
            return function(e) {
              return sample23(map34(f)(b))(map42(applyFlipped)(e));
            };
          };
        };
      };
    };
  };
  var keepLatest3 = function(dictFilterable) {
    var filterMap12 = filterMap(dictFilterable);
    var Functor1 = dictFilterable.Functor1();
    return function(dictIsEvent) {
      var fix12 = fix(dictIsEvent);
      var oneOf1 = oneOf2(dictIsEvent.Plus0());
      var keepLatest1 = keepLatest(dictIsEvent);
      var once22 = once(dictIsEvent);
      return function(dictPollable) {
        var sampleBy12 = sampleBy(dictPollable)(Functor1)(Functor1);
        return function(a) {
          return function(e) {
            return filterMap12(function(v) {
              if (v instanceof KeepLatestLast) {
                return new Just(v.value0);
              }
              ;
              return Nothing.value;
            })(fix12(function(ie) {
              return oneOf1([sampleBy12(KeepLatestStart.create)(a)(e), keepLatest1(flip(filterMap12)(ie)(function(v) {
                if (v instanceof KeepLatestStart) {
                  return new Just(sampleBy12(function(bb) {
                    return function(v1) {
                      return new KeepLatestLast(v.value1(bb));
                    };
                  })(v.value0)(once22(ie)));
                }
                ;
                return empty6;
              }))]);
            }));
          };
        };
      };
    };
  };
  var sample_ = function(dictPollable) {
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictFunctor) {
      var sampleBy2 = sampleBy12(dictFunctor);
      return function(dictFunctor1) {
        return sampleBy2(dictFunctor1)($$const);
      };
    };
  };
  var sample_1 = /* @__PURE__ */ sample_(pollable1)(functorEvent)(functorEvent);
  var rant = function(a) {
    return function __do3() {
      var ep = createPure();
      var started = newSTRef(false)();
      var unsub = newSTRef(pure6(unit))();
      return {
        unsubscribe: join3(read2(unsub)),
        poll: poll(function(e) {
          return makeEvent(function(s) {
            return function __do4() {
              var st = read2(started)();
              when2(!st)(function __do5() {
                var unsubscribe = s(sample_1(a)(once1(e)))(function(i) {
                  return justNone(ep.push(i));
                })();
                $$void6(write2(true)(started))();
                return $$void6(flip(write2)(unsub)(unsubscribe))();
              })();
              var u3 = s(sampleOnRightOp2(e)(ep.event))(justOne)();
              return u3;
            };
          });
        })
      };
    };
  };
  var sampleOnLeft3 = function(dictPollable) {
    var sample_2 = sample_(dictPollable);
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var sampleOnLeft12 = sampleOnLeft(dictIsEvent);
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var sample_3 = sample_2(Functor1)(Functor1);
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      return function(a) {
        return function(b) {
          return poll(function(e) {
            return sampleOnLeft12(sample_3(a)(e))(sampleBy2(composeFlipped2)(b)(e));
          });
        };
      };
    };
  };
  var sampleOnRight3 = function(dictPollable) {
    var sample_2 = sample_(dictPollable);
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var sampleOnRight12 = sampleOnRight(dictIsEvent);
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var sample_3 = sample_2(Functor1)(Functor1);
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      return function(a) {
        return function(b) {
          return poll(function(e) {
            return sampleOnRight12(sample_3(a)(e))(sampleBy2(composeFlipped2)(b)(e));
          });
        };
      };
    };
  };
  var altAPoll = function(dictAlt) {
    var alt9 = alt(dictAlt);
    var functorAPoll1 = functorAPoll(dictAlt.Functor0());
    return {
      alt: function(v) {
        return function(v1) {
          return function(e) {
            return alt9(v(e))(v1(e));
          };
        };
      },
      Functor0: function() {
        return functorAPoll1;
      }
    };
  };
  var plusAPoll = function(dictPlus) {
    var empty12 = empty2(dictPlus);
    var altAPoll1 = altAPoll(dictPlus.Alt0());
    return {
      empty: function(v) {
        return empty12;
      },
      Alt0: function() {
        return altAPoll1;
      }
    };
  };
  var fix3 = function(dictPollable) {
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var map34 = map(Functor1);
      var fix12 = fix(dictIsEvent);
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      var sham22 = sham(dictIsEvent);
      return function(f) {
        return poll(function(e) {
          return map34(function(v) {
            return v.value1(v.value0);
          })(fix12(function(ee) {
            return sampleBy2(Tuple.create)(f(sham22(map34(fst)(ee))))(e);
          }));
        });
      };
    };
  };
  var filterMap2 = function(dictCompactable) {
    var compact2 = compact(dictCompactable);
    return function(dictPollable) {
      var sampleBy12 = sampleBy(dictPollable);
      return function(dictFunctor) {
        var sampleBy2 = sampleBy12(dictFunctor)(dictFunctor);
        return function(f) {
          return function(b) {
            return poll(function(e) {
              return compact2(sampleBy2(function(a) {
                return function(ff2) {
                  return map13(ff2)(f(a));
                };
              })(b)(e));
            });
          };
        };
      };
    };
  };
  var partitionMap = function(dictPollable) {
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable)(dictPollable);
      return function(dictFunctor) {
        var map34 = map(functorAPoll(dictFunctor));
        var filterMap23 = filterMap12(dictFunctor);
        return function(f) {
          return function(b) {
            var fb = map34(f)(b);
            return {
              left: filterMap23(either(Just.create)($$const(Nothing.value)))(fb),
              right: filterMap23(either($$const(Nothing.value))(Just.create))(fb)
            };
          };
        };
      };
    };
  };
  var compactableAPoll = function(dictFunctor) {
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable);
      return function(dictPollable) {
        return {
          compact: filterMap12(dictPollable)(dictFunctor)(identity7),
          separate: partitionMap(dictPollable)(dictCompactable)(dictFunctor)(identity7)
        };
      };
    };
  };
  var filterableAPoll = function(dictFunctor) {
    var compactableAPoll1 = compactableAPoll(dictFunctor);
    var functorAPoll1 = functorAPoll(dictFunctor);
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable);
      var compactableAPoll2 = compactableAPoll1(dictCompactable);
      return function(dictPollable) {
        var filterMap23 = filterMap12(dictPollable)(dictFunctor);
        var partitionMap1 = partitionMap(dictPollable)(dictCompactable)(dictFunctor);
        var compactableAPoll3 = compactableAPoll2(dictPollable);
        return {
          filterMap: filterMap23,
          filter: function($473) {
            return filterMap23(maybeBool($473));
          },
          partitionMap: partitionMap1,
          partition: function(p) {
            return function(xs) {
              var o = partitionMap1(eitherBool(p))(xs);
              return {
                no: o.left,
                yes: o.right
              };
            };
          },
          Compactable0: function() {
            return compactableAPoll3;
          },
          Functor1: function() {
            return functorAPoll1;
          }
        };
      };
    };
  };
  var isEventAPoll = function(dictIsEvent) {
    var Filterable2 = dictIsEvent.Filterable2();
    var keepLatest1 = keepLatest3(Filterable2)(dictIsEvent);
    var plusAPoll1 = plusAPoll(dictIsEvent.Plus0());
    var altAPoll1 = altAPoll(dictIsEvent.Alt1());
    var filterableAPoll1 = filterableAPoll(Filterable2.Functor1())(Filterable2.Compactable0());
    return function(dictPlus) {
      return function(dictPollable) {
        var filterableAPoll2 = filterableAPoll1(dictPollable);
        return {
          sampleOnRight: sampleOnRight3(dictPollable)(dictIsEvent),
          sampleOnLeft: sampleOnLeft3(dictPollable)(dictIsEvent),
          keepLatest: keepLatest1(dictPollable),
          fix: fix3(dictPollable)(dictIsEvent),
          once: once3(dictPollable)(dictIsEvent),
          Plus0: function() {
            return plusAPoll1;
          },
          Alt1: function() {
            return altAPoll1;
          },
          Filterable2: function() {
            return filterableAPoll2;
          }
        };
      };
    };
  };
  var deflect = function(a) {
    return function __do3() {
      var ep = newSTRef([])();
      var started = newSTRef(false)();
      var unsub = newSTRef(pure6(unit))();
      return poll(function(e) {
        return makeEvent(function(s) {
          return function __do4() {
            var st = read2(started)();
            when2(!st)(function __do5() {
              var unsubscribe = s(sample_1(a)(once1(e)))(function(i) {
                return justNone($$void6(liftST3(flip(modify)(ep)(flip(snoc)(i)))));
              })();
              $$void6(write2(true)(started))();
              return $$void6(write2(unsubscribe)(unsub))();
            })();
            var u3 = s(e)(function(f) {
              return justManyM(function __do5() {
                join3(read2(unsub))();
                var r = read2(ep)();
                return map22(f)(r);
              });
            })();
            return u3;
          };
        });
      });
    };
  };
  var applyAPoll = function(dictApply) {
    var apply9 = apply2(dictApply);
    var Functor0 = dictApply.Functor0();
    var map34 = map(Functor0);
    var voidLeft4 = voidLeft(Functor0);
    var functorAPoll1 = functorAPoll(Functor0);
    return {
      apply: function(v) {
        return function(v1) {
          return function(e) {
            return apply9(map34(function(ff2) {
              return function(v2) {
                return v2.value0(ff2(v2.value1));
              };
            })(v(voidLeft4(e)(identity7))))(v1(map34(Tuple.create)(e)));
          };
        };
      },
      Functor0: function() {
        return functorAPoll1;
      }
    };
  };
  var applicativeAPoll = function(dictApply) {
    var map34 = map(dictApply.Functor0());
    var applyAPoll1 = applyAPoll(dictApply);
    return {
      pure: function(a) {
        return function(e) {
          return map34(applyFlipped(a))(e);
        };
      },
      Apply0: function() {
        return applyAPoll1;
      }
    };
  };

  // output/FRP.Poll/index.js
  var $runtime_lazy5 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var map14 = /* @__PURE__ */ map(functorArray);
  var alt6 = /* @__PURE__ */ alt(altEvent);
  var pollable2 = /* @__PURE__ */ pollable(eventIsEvent);
  var sample12 = /* @__PURE__ */ sample(pollable2);
  var sampleOnLeft1 = /* @__PURE__ */ sampleOnLeft(eventIsEvent);
  var alt1 = /* @__PURE__ */ alt(/* @__PURE__ */ altAPoll(altEvent));
  var oneOfMap2 = /* @__PURE__ */ oneOfMap(foldableArray)(/* @__PURE__ */ plusAPoll(plusEvent));
  var pure7 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeAPoll(applyEvent));
  var sham1 = /* @__PURE__ */ sham(eventIsEvent);
  var sampleOnRight1 = /* @__PURE__ */ sampleOnRight(eventIsEvent);
  var isEventAPoll2 = /* @__PURE__ */ isEventAPoll(eventIsEvent)(plusEvent)(pollable2);
  var sampleOnLeft22 = /* @__PURE__ */ sampleOnLeft(isEventAPoll2);
  var sampleOnRight22 = /* @__PURE__ */ sampleOnRight(isEventAPoll2);
  var once12 = /* @__PURE__ */ once(isEventAPoll2);
  var append5 = /* @__PURE__ */ append(semigroupArray);
  var foldr4 = /* @__PURE__ */ foldr(foldableArray);
  var pure14 = /* @__PURE__ */ pure(applicativeST);
  var discard2 = /* @__PURE__ */ discard(discardUnit);
  var discard1 = /* @__PURE__ */ discard2(freeBind);
  var $$void7 = /* @__PURE__ */ $$void(functorST);
  var liftST4 = /* @__PURE__ */ liftST(monadSTST);
  var identity8 = /* @__PURE__ */ identity(categoryFn);
  var map23 = /* @__PURE__ */ map(/* @__PURE__ */ functorAPoll(functorEvent));
  var map32 = /* @__PURE__ */ map(functorEvent);
  var unsafeIndex2 = /* @__PURE__ */ unsafeIndex();
  var sampleBy1 = /* @__PURE__ */ sampleBy(pollable2)(functorEvent)(functorEvent);
  var fix1 = /* @__PURE__ */ fix(eventIsEvent);
  var filterMap1 = /* @__PURE__ */ filterMap(filterableArray);
  var filterMap22 = /* @__PURE__ */ filterMap(/* @__PURE__ */ filterableAPoll(functorEvent)(compactableEvent)(pollable2));
  var filterMap3 = /* @__PURE__ */ filterMap(filterableEvent);
  var empty7 = /* @__PURE__ */ empty2(plusEvent);
  var dimap2 = /* @__PURE__ */ dimap(profunctorFn);
  var fix22 = /* @__PURE__ */ fix(isEventAPoll2);
  var apply6 = /* @__PURE__ */ apply2(applyEvent);
  var apply1 = /* @__PURE__ */ apply2(/* @__PURE__ */ applyAPoll(applyEvent));
  var OnlyPure = /* @__PURE__ */ function() {
    function OnlyPure2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyPure2.create = function(value0) {
      return new OnlyPure2(value0);
    };
    return OnlyPure2;
  }();
  var OnlyPoll = /* @__PURE__ */ function() {
    function OnlyPoll2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyPoll2.create = function(value0) {
      return new OnlyPoll2(value0);
    };
    return OnlyPoll2;
  }();
  var OnlyEvent = /* @__PURE__ */ function() {
    function OnlyEvent2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyEvent2.create = function(value0) {
      return new OnlyEvent2(value0);
    };
    return OnlyEvent2;
  }();
  var PureAndEvent = /* @__PURE__ */ function() {
    function PureAndEvent2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PureAndEvent2.create = function(value0) {
      return function(value1) {
        return new PureAndEvent2(value0, value1);
      };
    };
    return PureAndEvent2;
  }();
  var PureAndPoll = /* @__PURE__ */ function() {
    function PureAndPoll2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PureAndPoll2.create = function(value0) {
      return function(value1) {
        return new PureAndPoll2(value0, value1);
      };
    };
    return PureAndPoll2;
  }();
  var pollableEvent = {
    sample: function(v) {
      return function(v1) {
        if (v instanceof PureAndPoll) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map14(f)(v.value0));
            });
          });
          return alt6(e)(sample12(v.value1)(v1));
        }
        ;
        if (v instanceof PureAndEvent) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map14(f)(v.value0));
            });
          });
          return alt6(e)(sampleOnLeft1(v.value1)(v1));
        }
        ;
        if (v instanceof OnlyEvent) {
          return sampleOnLeft1(v.value0)(v1);
        }
        ;
        if (v instanceof OnlyPoll) {
          return sample12(v.value0)(v1);
        }
        ;
        if (v instanceof OnlyPure) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map14(f)(v.value0));
            });
          });
          return e;
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 637, column 1 - line 648, column 54): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var toPoll = function(v) {
    if (v instanceof PureAndPoll) {
      return alt1(oneOfMap2(pure7)(v.value0))(v.value1);
    }
    ;
    if (v instanceof PureAndEvent) {
      return alt1(oneOfMap2(pure7)(v.value0))(sham1(v.value1));
    }
    ;
    if (v instanceof OnlyEvent) {
      return sham1(v.value0);
    }
    ;
    if (v instanceof OnlyPure) {
      return oneOfMap2(pure7)(v.value0);
    }
    ;
    if (v instanceof OnlyPoll) {
      return v.value0;
    }
    ;
    throw new Error("Failed pattern match at FRP.Poll (line 140, column 1 - line 140, column 28): " + [v.constructor.name]);
  };
  var sample2 = function(dict) {
    return dict.sample;
  };
  var sample22 = /* @__PURE__ */ sample2(pollableEvent);
  var pollFromPoll = function(i) {
    return new OnlyPoll(i);
  };
  var sampleOnLeft4 = function(v) {
    return function(v1) {
      if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
        return new OnlyEvent(sampleOnLeft1(v.value0)(v1.value0));
      }
      ;
      return pollFromPoll(sampleOnLeft22(toPoll(v))(toPoll(v1)));
    };
  };
  var sampleOnRight4 = function(v) {
    return function(v1) {
      if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
        return new OnlyEvent(sampleOnRight1(v.value0)(v1.value0));
      }
      ;
      return pollFromPoll(sampleOnRight22(toPoll(v))(toPoll(v1)));
    };
  };
  var stRefToPoll2 = function(r) {
    return pollFromPoll(stRefToPoll(r));
  };
  var pollFromEvent = /* @__PURE__ */ function() {
    return OnlyEvent.create;
  }();
  var sham2 = pollFromEvent;
  var once4 = function(i) {
    return pollFromPoll(once12(toPoll(i)));
  };
  var merge3 = function(a) {
    var go2 = function(v2) {
      return function(v1) {
        if (v2 instanceof OnlyPure) {
          return {
            l: append5(v2.value0)(v1.l),
            m: v1.m,
            r: v1.r
          };
        }
        ;
        if (v2 instanceof OnlyEvent) {
          return {
            l: v1.l,
            m: append5([v2.value0])(v1.m),
            r: v1.r
          };
        }
        ;
        if (v2 instanceof PureAndEvent) {
          return {
            l: append5(v2.value0)(v1.l),
            m: append5([v2.value1])(v1.m),
            r: v1.r
          };
        }
        ;
        if (v2 instanceof OnlyPoll) {
          return {
            l: v1.l,
            m: v1.m,
            r: append5([v2.value0])(v1.r)
          };
        }
        ;
        if (v2 instanceof PureAndPoll) {
          return {
            l: append5(v2.value0)(v1.l),
            m: v1.m,
            r: append5([v2.value1])(v1.r)
          };
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 203, column 3 - line 203, column 52): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
    var v = foldr4(go2)({
      l: [],
      m: [],
      r: []
    })(a);
    if (v.m.length === 0 && v.r.length === 0) {
      return new OnlyPure(v.l);
    }
    ;
    if (v.l.length === 0 && v.r.length === 0) {
      return new OnlyEvent(merge(v.m));
    }
    ;
    if (v.l.length === 0 && v.m.length === 0) {
      return new OnlyPoll(merge2(v.r));
    }
    ;
    return new PureAndPoll(v.l, alt1(sham1(merge(v.m)))(merge2(v.r)));
  };
  var keepLatest$prime = function(e) {
    return makeEvent(function(s) {
      return function __do3() {
        var cancelInner = newSTRef(pure14(unit))();
        var onPure = function(p) {
          return discard1(justNone($$void7(liftST4(write2(pure14(unit))(cancelInner)))))(function() {
            return justMany(p);
          });
        };
        var onPoll = function(p) {
          return justNone(function __do4() {
            var ep = createPure();
            var c = s(sample12(p)(ep.event))(justOne)();
            ep.push(identity8)();
            return $$void7(liftST4(write2(c)(cancelInner)))();
          });
        };
        var onEvent = function(ev) {
          return justNone(function __do4() {
            var c = s(ev)(justOne)();
            return $$void7(liftST4(write2(c)(cancelInner)))();
          });
        };
        var treatMe = function(i) {
          if (i instanceof OnlyPure) {
            return onPure(i.value0);
          }
          ;
          if (i instanceof OnlyEvent) {
            return onEvent(i.value0);
          }
          ;
          if (i instanceof OnlyPoll) {
            return onPoll(i.value0);
          }
          ;
          if (i instanceof PureAndEvent) {
            return discard1(onPure(i.value0))(function() {
              return onEvent(i.value1);
            });
          }
          ;
          if (i instanceof PureAndPoll) {
            return discard1(onPure(i.value0))(function() {
              return onPoll(i.value1);
            });
          }
          ;
          throw new Error("Failed pattern match at FRP.Poll (line 576, column 17 - line 585, column 17): " + [i.constructor.name]);
        };
        var cancelOuter = s(e)(function(i) {
          return discard1(justNone(function __do4() {
            var ci = read2(cancelInner)();
            return ci();
          }))(function() {
            return treatMe(i);
          });
        })();
        return function __do4() {
          var ci = read2(cancelInner)();
          ci();
          return cancelOuter();
        };
      };
    });
  };
  var functorAPoll2 = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof PureAndPoll) {
          return new PureAndPoll(map14(v)(v1.value0), map23(v)(v1.value1));
        }
        ;
        if (v1 instanceof PureAndEvent) {
          return new PureAndEvent(map14(v)(v1.value0), map32(v)(v1.value1));
        }
        ;
        if (v1 instanceof OnlyPure) {
          return new OnlyPure(map14(v)(v1.value0));
        }
        ;
        if (v1 instanceof OnlyEvent) {
          return new OnlyEvent(map32(v)(v1.value0));
        }
        ;
        if (v1 instanceof OnlyPoll) {
          return new OnlyPoll(map23(v)(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 83, column 1 - line 88, column 42): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var map52 = /* @__PURE__ */ map(functorAPoll2);
  var altPoll = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof OnlyPure && v1 instanceof OnlyPure) {
          return new OnlyPure(append5(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof OnlyEvent) {
          return new PureAndPoll(v.value0, sham1(v1.value0));
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, v1.value0);
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof PureAndEvent) {
          return new PureAndEvent(append5(v.value0)(v1.value0), v1.value1);
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), v1.value1);
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyPure) {
          return new PureAndPoll(v1.value0, sham1(v.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
          return new OnlyEvent(alt6(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyPoll) {
          return new OnlyPoll(alt1(sham1(v.value0))(v1.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof PureAndEvent) {
          return new PureAndEvent(v1.value0, alt6(v.value0)(v1.value1));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof PureAndPoll) {
          return new PureAndPoll(v1.value0, alt1(sham1(v.value0))(v1.value1));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyPure) {
          return new PureAndPoll(v1.value0, v.value0);
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyEvent) {
          return new OnlyPoll(alt1(v.value0)(sham1(v1.value0)));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyPoll) {
          return new OnlyPoll(alt1(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof PureAndEvent) {
          return new PureAndPoll(v1.value0, alt1(v.value0)(sham1(v1.value1)));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof PureAndPoll) {
          return new PureAndPoll(v1.value0, alt1(v.value0)(v1.value1));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyPure) {
          return new PureAndEvent(append5(v.value0)(v1.value0), v.value1);
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyEvent) {
          return new PureAndEvent(v.value0, alt6(v.value1)(v1.value0));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, alt1(sham1(v.value1))(v1.value0));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof PureAndEvent) {
          return new PureAndEvent(append5(v.value0)(v1.value0), alt6(v.value1)(v1.value1));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(sham1(v.value1))(v1.value1));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyPure) {
          return new PureAndPoll(append5(v.value0)(v1.value0), v.value1);
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyEvent) {
          return new PureAndPoll(v.value0, alt1(v.value1)(sham1(v1.value0)));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, alt1(v.value1)(v1.value0));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof PureAndEvent) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(v.value1)(sham1(v1.value1)));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(v.value1)(v1.value1));
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 158, column 1 - line 187, column 75): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorAPoll2;
    }
  };
  var plusPoll = /* @__PURE__ */ function() {
    return {
      empty: new OnlyPure([]),
      Alt0: function() {
        return altPoll;
      }
    };
  }();
  var empty1 = /* @__PURE__ */ empty2(plusPoll);
  var rant2 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v instanceof PureAndPoll) {
        $copy_v = new OnlyPoll(v.value1);
        return;
      }
      ;
      if (v instanceof PureAndEvent) {
        $copy_v = new OnlyEvent(v.value1);
        return;
      }
      ;
      if (v instanceof OnlyEvent) {
        $tco_done = true;
        return function __do3() {
          var v1 = memoize(v.value0)();
          return {
            poll: new OnlyEvent(v1.event),
            unsubscribe: v1.unsubscribe
          };
        };
      }
      ;
      if (v instanceof OnlyPoll) {
        $tco_done = true;
        return function __do3() {
          var v1 = rant(v.value0)();
          return {
            poll: new OnlyPoll(v1.poll),
            unsubscribe: v1.unsubscribe
          };
        };
      }
      ;
      if (v instanceof OnlyPure) {
        $tco_done = true;
        return pure14({
          poll: empty1,
          unsubscribe: pure14(unit)
        });
      }
      ;
      throw new Error("Failed pattern match at FRP.Poll (line 524, column 1 - line 527, column 65): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var foldlArr = function(bc) {
    return function(arf) {
      return function(bb) {
        return function(arr) {
          var go2 = function($copy_i) {
            return function($copy_b) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, b) {
                if (i === length(arr)) {
                  $tco_done = true;
                  return bc(b);
                }
                ;
                if (otherwise) {
                  var v = arf(b)(unsafeIndex2(arr)(i))((i + 1 | 0) === length(arr))(function(v1) {
                    return drop(i + 1 | 0)(arr);
                  });
                  if (v instanceof Left) {
                    $tco_var_i = i + 1 | 0;
                    $copy_b = v.value0;
                    return;
                  }
                  ;
                  if (v instanceof Right) {
                    $tco_done = true;
                    return v.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at FRP.Poll (line 602, column 19 - line 604, column 21): " + [v.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at FRP.Poll (line 600, column 3 - line 604, column 21): " + [i.constructor.name, b.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_b);
              }
              ;
              return $tco_result;
            };
          };
          return go2(0)(bb);
        };
      };
    };
  };
  var $lazy_replayPollsForKeepLatest = /* @__PURE__ */ $runtime_lazy5("replayPollsForKeepLatest", "FRP.Poll", function() {
    var cnt = function(isLast) {
      return function(pl) {
        return function(x) {
          return poll(function(e) {
            return makeEvent(function(sub2) {
              return function __do3() {
                var dfl = function() {
                  if (isLast) {
                    return pure14;
                  }
                  ;
                  return deflect;
                }()(pl)();
                return sub2(alt6(sample12(dfl)(e))(sample22($lazy_replayPollsForKeepLatest(621)(x(unit)))(e)))(justOne)();
              };
            });
          });
        };
      };
    };
    return foldlArr(OnlyPure.create)(function(b) {
      return function(a) {
        return function(isLast) {
          return function(x) {
            if (a instanceof OnlyPure) {
              return new Left(append5(b)(a.value0));
            }
            ;
            if (a instanceof OnlyEvent) {
              return new Left(b);
            }
            ;
            if (a instanceof PureAndEvent) {
              return new Left(append5(b)(a.value0));
            }
            ;
            if (a instanceof OnlyPoll) {
              return new Right(new PureAndPoll(b, cnt(isLast)(a.value0)(x)));
            }
            ;
            if (a instanceof PureAndPoll) {
              return new Right(new PureAndPoll(append5(b)(a.value0), cnt(isLast)(a.value1)(x)));
            }
            ;
            throw new Error("Failed pattern match at FRP.Poll (line 608, column 22 - line 615, column 75): " + [a.constructor.name]);
          };
        };
      };
    })([]);
  });
  var replayPollsForKeepLatest = /* @__PURE__ */ $lazy_replayPollsForKeepLatest(606);
  var keepLatest4 = function(v) {
    if (v instanceof OnlyPure) {
      return replayPollsForKeepLatest(v.value0);
    }
    ;
    if (v instanceof OnlyEvent) {
      return new OnlyEvent(keepLatest$prime(v.value0));
    }
    ;
    if (v instanceof OnlyPoll) {
      return new OnlyPoll(poll(function(e) {
        return map32(uncurry(apply))(keepLatest$prime(sampleBy1(function(pl) {
          return function(ff2) {
            return map52(Tuple.create(ff2))(pl);
          };
        })(v.value0)(e)));
      }));
    }
    ;
    if (v instanceof PureAndEvent) {
      return replayPollsForKeepLatest(append5(v.value0)([new OnlyEvent(keepLatest$prime(v.value1))]));
    }
    ;
    if (v instanceof PureAndPoll) {
      return replayPollsForKeepLatest(append5(v.value0)([keepLatest4(new OnlyPoll(v.value1))]));
    }
    ;
    throw new Error("Failed pattern match at FRP.Poll (line 623, column 1 - line 626, column 12): " + [v.constructor.name]);
  };
  var filterMap4 = function(v) {
    return function(v1) {
      if (v1 instanceof PureAndPoll) {
        return new PureAndPoll(filterMap1(v)(v1.value0), filterMap22(v)(v1.value1));
      }
      ;
      if (v1 instanceof PureAndEvent) {
        return new PureAndEvent(filterMap1(v)(v1.value0), filterMap3(v)(v1.value1));
      }
      ;
      if (v1 instanceof OnlyPure) {
        return new OnlyPure(filterMap1(v)(v1.value0));
      }
      ;
      if (v1 instanceof OnlyEvent) {
        return new OnlyEvent(filterMap3(v)(v1.value0));
      }
      ;
      if (v1 instanceof OnlyPoll) {
        return new OnlyPoll(filterMap22(v)(v1.value0));
      }
      ;
      throw new Error("Failed pattern match at FRP.Poll (line 417, column 1 - line 421, column 12): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var partitionMap2 = function(f) {
    return function(b) {
      var fb = map52(f)(b);
      return {
        left: filterMap4(either(Just.create)($$const(Nothing.value)))(fb),
        right: filterMap4(either($$const(Nothing.value))(Just.create))(fb)
      };
    };
  };
  var compactablePoll = {
    compact: /* @__PURE__ */ filterMap4(identity8),
    separate: /* @__PURE__ */ partitionMap2(identity8)
  };
  var filterablePoll = {
    filterMap: filterMap4,
    filter: function($443) {
      return filterMap4(maybeBool($443));
    },
    partitionMap: partitionMap2,
    partition: function(p) {
      return function(xs) {
        var o = partitionMap2(eitherBool(p))(xs);
        return {
          no: o.left,
          yes: o.right
        };
      };
    },
    Compactable0: function() {
      return compactablePoll;
    },
    Functor1: function() {
      return functorAPoll2;
    }
  };
  var eventOrBust = function(v) {
    if (v instanceof OnlyEvent) {
      return v.value0;
    }
    ;
    return empty7;
  };
  var fix4 = function(f) {
    var o = f(empty1);
    if (o instanceof OnlyEvent) {
      return pollFromEvent(fix1(dimap2(pollFromEvent)(eventOrBust)(f)));
    }
    ;
    return pollFromPoll(fix22(dimap2(pollFromPoll)(toPoll)(f)));
  };
  var isEventPoll = {
    sampleOnRight: sampleOnRight4,
    sampleOnLeft: sampleOnLeft4,
    keepLatest: keepLatest4,
    fix: fix4,
    once: once4,
    Plus0: function() {
      return plusPoll;
    },
    Alt1: function() {
      return altPoll;
    },
    Filterable2: function() {
      return filterablePoll;
    }
  };
  var create4 = function __do() {
    var v = create();
    var v1 = rant2(sham2(v.event))();
    return {
      poll: v1.poll,
      push: v.push
    };
  };
  var applyAPoll2 = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
          return new OnlyEvent(apply6(v.value0)(v1.value0));
        }
        ;
        return pollFromPoll(apply1(toPoll(v))(toPoll(v1)));
      };
    },
    Functor0: function() {
      return functorAPoll2;
    }
  };
  var applicativeAPoll2 = {
    pure: function(a) {
      return new OnlyPure([a]);
    },
    Apply0: function() {
      return applyAPoll2;
    }
  };

  // output/Deku.Internal.Region/index.js
  var $$void8 = /* @__PURE__ */ $$void(functorST);
  var bind3 = /* @__PURE__ */ bind(bindST);
  var map15 = /* @__PURE__ */ map(functorST);
  var join4 = /* @__PURE__ */ join(bindST);
  var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindST);
  var pure8 = /* @__PURE__ */ pure(applicativeST);
  var empty8 = /* @__PURE__ */ empty2(plusPoll);
  var eq4 = /* @__PURE__ */ eq(eqInt);
  var apply7 = /* @__PURE__ */ apply2(applyST);
  var notEq2 = /* @__PURE__ */ notEq(eqInt);
  var unsafeIndex3 = /* @__PURE__ */ unsafeIndex();
  var when3 = /* @__PURE__ */ when(applicativeST);
  var clamp2 = /* @__PURE__ */ clamp(ordInt);
  var add2 = /* @__PURE__ */ add(semiringInt);
  var alt7 = /* @__PURE__ */ alt(altPoll);
  var map16 = /* @__PURE__ */ map(functorAPoll2);
  var not4 = /* @__PURE__ */ not(heytingAlgebraBoolean);
  var whenM2 = /* @__PURE__ */ whenM(monadST);
  var min5 = /* @__PURE__ */ min(ordInt);
  var traverse_2 = /* @__PURE__ */ traverse_(applicativeST)(foldableMaybe);
  var ParentStart = /* @__PURE__ */ function() {
    function ParentStart2(value0) {
      this.value0 = value0;
    }
    ;
    ParentStart2.create = function(value0) {
      return new ParentStart2(value0);
    };
    return ParentStart2;
  }();
  var Element2 = /* @__PURE__ */ function() {
    function Element3(value0) {
      this.value0 = value0;
    }
    ;
    Element3.create = function(value0) {
      return new Element3(value0);
    };
    return Element3;
  }();
  var Text = /* @__PURE__ */ function() {
    function Text2(value0) {
      this.value0 = value0;
    }
    ;
    Text2.create = function(value0) {
      return new Text2(value0);
    };
    return Text2;
  }();
  var StaticRegion = function(x) {
    return x;
  };
  var updateShared = function(shared) {
    return function(v, region) {
      return $$void8(write2(shared)(region.end))();
    };
  };
  var updateIx = function(i, v) {
    return v.pushIx(i);
  };
  var readSharedBound = function(shared) {
    var v = read2(shared)();
    return v.bound();
  };
  var newSpan = function(parent2, parentBump) {
    var children2 = newSTArray();
    var parentBound = function __do3() {
      var owner = newSTRef(pure8(0))();
      var extent = newSTRef(pure8(0))();
      var pushAnchor = function(v) {
        return unit;
      };
      return newSTRef({
        owner,
        extent,
        bound: parent2,
        pushAnchor
      })();
    }();
    var parentRegion = {
      ix: pure8(0),
      pushIx: function(v) {
        return unit;
      },
      position: empty8,
      end: parentBound
    };
    $$void8(push(parentRegion)(children2))();
    return {
      children: children2,
      bump: parentBump
    };
  };
  var isLastBound = function(region, children2) {
    var length10 = length2(children2)();
    var end = read2(region.end)();
    var owner = join4(read2(end.owner))();
    var pos = region.ix();
    var extent = join4(read2(end.extent))();
    return owner === pos && extent === (length10 - 1 | 0);
  };
  var isEmpty = function(v) {
    var v1 = read2(v.end)();
    return apply7(map15(notEq2)(join4(read2(v1.owner))))(v.ix)();
  };
  var index4 = function(ix, arr) {
    return map15(flip(unsafeIndex3)(ix))(unsafeFreeze(arr))();
  };
  var lastRegion = function(children2) {
    var length10 = length2(children2)();
    return index4(length10 - 1 | 0, children2);
  };
  var updateParent = function(wasLast, managed, v) {
    var nowLast = isLastBound(managed, v.children);
    return when3(wasLast !== nowLast)(function __do3() {
      var last3 = lastRegion(v.children);
      var end = read2(last3.end)();
      var ownerIx = join4(read2(end.owner))();
      var $66 = ownerIx === 0;
      if ($66) {
        return v.bump(Nothing.value);
      }
      ;
      var anchor = end.bound();
      return v.bump(new Just(anchor));
    })();
  };
  var shareBound = function(posRef, children2) {
    var pos = posRef();
    var prev = index4(pos - 1 | 0, children2);
    var endFromPrev = read2(prev.end)();
    var currentExtent = join4(read2(endFromPrev.extent))();
    when3(currentExtent < pos)($$void8(write2(posRef)(endFromPrev.extent)))();
    return endFromPrev;
  };
  var fixManagedTo = function(from2, to, fn, children2) {
    var elems = unsafeFreeze(children2)();
    return forST(from2)(to)(function(ix) {
      return function() {
        return fn(ix, unsafeIndex3(elems)(ix));
      };
    })();
  };
  var fixManaged = function(from2, fn, children2) {
    var length10 = length2(children2)();
    return fixManagedTo(from2, length10, fn, children2);
  };
  var insertManaged = function(givenPos, children2) {
    var length10 = length2(children2)();
    var pos = clamp2(1)(length10)(maybe(length10)(add2(1))(givenPos));
    var ixRef = newSTRef(pos)();
    var posEvent = createPure();
    var pushIx = function(i) {
      $$void8(write2(i)(ixRef))();
      return posEvent.push(i - 1 | 0)();
    };
    var position2 = alt7(map16(add2(-1 | 0))(stRefToPoll2(ixRef)))(pollFromEvent(posEvent.event));
    var ix = read2(ixRef);
    var prevBegin = shareBound(ix, children2);
    var end = newSTRef(prevBegin)();
    var managed = {
      ix,
      pushIx,
      position: position2,
      end
    };
    $$void8(splice(pos)(0)([managed])(children2))();
    fixManaged(pos + 1 | 0, updateIx, children2);
    return managed;
  };
  var clearBound = function(cleared, children2) {
    var nextBound = read2(cleared.end)();
    var selfIx = cleared.ix();
    var prevBound = bindFlipped4(function($95) {
      return read2(function(v) {
        return v.end;
      }($95));
    })(function() {
      return index4(selfIx - 1 | 0, children2);
    })();
    var extentToEff = read2(nextBound.extent)();
    var extentToIx = extentToEff();
    var ownerEff = read2(prevBound.owner)();
    var ownerIx = ownerEff();
    var $69 = (selfIx - ownerIx | 0) > (extentToIx - selfIx | 0) || ownerIx === 0;
    if ($69) {
      $$void8(write2(extentToEff)(prevBound.extent))();
      return fixManagedTo(selfIx, extentToIx + 1 | 0, updateShared(prevBound), children2);
    }
    ;
    var anchor = prevBound.bound();
    nextBound.pushAnchor(anchor);
    $$void8(write2(ownerEff)(nextBound.owner))();
    return fixManagedTo(ownerIx, selfIx + 1 | 0, updateShared(nextBound), children2);
  };
  var bumpBound = function(anchor, bumped, children2) {
    var empty12 = isEmpty(bumped);
    var $70 = !empty12;
    if ($70) {
      var ownedBound = read2(bumped.end)();
      return ownedBound.pushAnchor(anchor);
    }
    ;
    var prevExtent = read2(bumped.end)();
    var ownerEff = read2(prevExtent.owner)();
    var ownerIx = ownerEff();
    var extentToEff = read2(prevExtent.extent)();
    var extentToIx = extentToEff();
    var selfIx = bumped.ix();
    var previousRegion = index4(selfIx - 1 | 0, children2);
    var $71 = (selfIx - ownerIx | 0) > (extentToIx - selfIx | 0) || ownerIx === 0;
    if ($71) {
      var newShared = function __do3() {
        var owner = newSTRef(bumped.ix)();
        var extent = newSTRef(extentToEff)();
        var ref = newSTRef(anchor)();
        var pushAnchor = function(a) {
          return $$void8(write2(a)(ref))();
        };
        var bound = read2(ref);
        return {
          owner,
          extent,
          bound,
          pushAnchor
        };
      }();
      fixManagedTo(selfIx, extentToIx + 1 | 0, updateShared(newShared), children2);
      return $$void8(write2(previousRegion.ix)(prevExtent.extent))();
    }
    ;
    var newShared = function __do3() {
      var owner = newSTRef(ownerEff)();
      var extent = newSTRef(previousRegion.ix)();
      var ref = bindFlipped4(newSTRef)(prevExtent.bound)();
      var pushAnchor = function(a) {
        return $$void8(write2(a)(ref))();
      };
      var bound = read2(ref);
      return {
        owner,
        extent,
        bound,
        pushAnchor
      };
    }();
    fixManagedTo(ownerIx, selfIx, updateShared(newShared), children2);
    $$void8(write2(bumped.ix)(prevExtent.owner))();
    return prevExtent.pushAnchor(anchor);
  };
  var beginBound = function(region, children2) {
    var ix = region.ix();
    var prev = index4(ix - 1 | 0, children2);
    var sbound = read2(prev.end)();
    return sbound.bound();
  };
  var allocateRegion = function(givenPos, v) {
    var v1 = insertManaged(givenPos, v.children);
    var sendTo = function(pos$prime) {
      var pos = pos$prime + 1 | 0;
      var lastAnchor = newSTRef(Nothing.value)();
      var wasLast = isLastBound(v1, v.children);
      var lastIx = v1.ix();
      whenM2(map15(not4)(function() {
        return isEmpty(v1);
      }))(function __do3() {
        var anchor = bindFlipped4(function(v2) {
          return v2.bound;
        })(read2(v1.end))();
        $$void8(write2(new Just(anchor))(lastAnchor))();
        return clearBound(v1, v.children);
      })();
      (function __do3() {
        var sharedBound = read2(v1.end)();
        return whenM2(map15(eq4(lastIx))(join4(read2(sharedBound.extent))))(function __do4() {
          var previousRegion = index4(lastIx - 1 | 0, v.children);
          return $$void8(write2(previousRegion.ix)(sharedBound.extent))();
        })();
      })();
      (function __do3() {
        var removed = splice(lastIx)(1)([])(v.children)();
        $$void8(splice(pos)(0)(removed)(v.children))();
        fixManaged(min5(lastIx)(pos), updateIx, v.children);
        var newBegin = shareBound(v1.ix, v.children);
        return $$void8(write2(newBegin)(v1.end))();
      })();
      bind3(read2(lastAnchor))(traverse_2(function(anchor) {
        return function() {
          return bumpBound(anchor, v1, v.children);
        };
      }))();
      return updateParent(wasLast, v1, v);
    };
    var end = function() {
      return readSharedBound(v1.end);
    };
    var bump = function(v2) {
      if (v2 instanceof Nothing) {
        var wasLast = isLastBound(v1, v.children);
        clearBound(v1, v.children);
        return updateParent(wasLast, v1, v);
      }
      ;
      if (v2 instanceof Just) {
        bumpBound(v2.value0, v1, v.children);
        return whenM2(function() {
          return isLastBound(v1, v.children);
        })(function() {
          return v.bump(v2);
        })();
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Region (line 198, column 22 - line 207, column 34): " + [v2.constructor.name]);
    };
    var remove2 = function __do3() {
      bump(Nothing.value);
      var finalIx = v1.ix();
      v1.pushIx(-1 | 0);
      $$void8(splice(finalIx)(1)([])(v.children))();
      return fixManaged(finalIx, updateIx, v.children);
    };
    var begin = function() {
      return beginBound(v1, v.children);
    };
    return {
      begin,
      end,
      position: v1.position,
      sendTo,
      remove: remove2,
      bump
    };
  };
  var newStaticRegion = function(parentBound, parentBump) {
    var spanCounter = newSTRef(-1 | 0)();
    var spanState = newSTRef(Nothing.value)();
    var staticEnd = newSTRef(Nothing.value)();
    var spanEnd = newSTRef(Nothing.value)();
    var findOrCreateSpan = function __do3() {
      var v = read2(spanState)();
      if (v instanceof Nothing) {
        var spanIx = modify(add2(1))(spanCounter)();
        var staticBegin = read2(staticEnd)();
        var bump = function(update2) {
          return whenM2(map15(eq4(spanIx))(read2(spanCounter)))(function __do4() {
            $$void8(write2(update2)(spanEnd))();
            if (update2 instanceof Nothing) {
              return bindFlipped4(runSTFn1(parentBump))(read2(staticEnd))();
            }
            ;
            return parentBump(update2);
          })();
        };
        var begin = function() {
          if (staticBegin instanceof Just) {
            return pure8(staticBegin.value0);
          }
          ;
          if (staticBegin instanceof Nothing) {
            return parentBound;
          }
          ;
          throw new Error("Failed pattern match at Deku.Internal.Region (line 510, column 13 - line 512, column 37): " + [staticBegin.constructor.name]);
        }();
        var span5 = newSpan(begin, bump);
        $$void8(write2(new Just(span5))(spanState))();
        return span5;
      }
      ;
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Region (line 503, column 46 - line 531, column 18): " + [v.constructor.name]);
    };
    return {
      end: function __do3() {
        var fromSpan = read2(spanEnd)();
        if (fromSpan instanceof Just) {
          return fromSpan.value0;
        }
        ;
        if (fromSpan instanceof Nothing) {
          var fromStatic = read2(staticEnd)();
          if (fromStatic instanceof Just) {
            return fromStatic.value0;
          }
          ;
          if (fromStatic instanceof Nothing) {
            return parentBound();
          }
          ;
          throw new Error("Failed pattern match at Deku.Internal.Region (line 542, column 13 - line 547, column 28): " + [fromStatic.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Deku.Internal.Region (line 536, column 9 - line 547, column 28): " + [fromSpan.constructor.name]);
      },
      region: function __do3() {
        var span5 = findOrCreateSpan();
        return allocateRegion(Nothing.value, span5);
      },
      element: function(anchor) {
        whenM2(map15(isJust)(read2(spanState)))(function __do3() {
          $$void8(write2(Nothing.value)(spanState))();
          $$void8(write2(Nothing.value)(spanEnd))();
          return $$void8(modify(add2(1))(spanCounter))();
        })();
        $$void8(write2(new Just(anchor))(staticEnd))();
        return parentBump(new Just(anchor));
      }
    };
  };
  var fromParent = function(parent2) {
    return newStaticRegion(pure8(new ParentStart(parent2)), function(v) {
      return unit;
    });
  };

  // output/Deku.Core/index.js
  var liftST5 = /* @__PURE__ */ liftST(monadSTEffect);
  var alt8 = /* @__PURE__ */ alt(altPoll);
  var pure9 = /* @__PURE__ */ pure(applicativeAPoll2);
  var coerce3 = /* @__PURE__ */ coerce();
  var map17 = /* @__PURE__ */ map(functorFn);
  var empty9 = /* @__PURE__ */ empty2(plusPoll);
  var $$void9 = /* @__PURE__ */ $$void(functorEffect);
  var sample3 = /* @__PURE__ */ sample(/* @__PURE__ */ pollable(eventIsEvent));
  var identity9 = /* @__PURE__ */ identity(categoryFn);
  var void12 = /* @__PURE__ */ $$void(functorST);
  var unsafeIndex4 = /* @__PURE__ */ unsafeIndex();
  var once5 = /* @__PURE__ */ once(isEventPoll);
  var un2 = /* @__PURE__ */ un();
  var when4 = /* @__PURE__ */ when(applicativeEffect);
  var not5 = /* @__PURE__ */ not(heytingAlgebraBoolean);
  var voidLeft2 = /* @__PURE__ */ voidLeft(functorAPoll2);
  var add3 = /* @__PURE__ */ add(semiringInt);
  var whenM3 = /* @__PURE__ */ whenM(monadEffect);
  var map18 = /* @__PURE__ */ map(functorEffect);
  var map24 = /* @__PURE__ */ map(functorAPoll2);
  var map33 = /* @__PURE__ */ map(functorMaybe);
  var sample13 = /* @__PURE__ */ sample2(pollableEvent);
  var PSR = function(x) {
    return x;
  };
  var Namespace = function(x) {
    return x;
  };
  var Cb = function(x) {
    return x;
  };
  var DOMInterpret = function(x) {
    return x;
  };
  var Attribute = function(x) {
    return x;
  };
  var useState = function(a) {
    return function(f) {
      return function(psr, di) {
        var v = liftST5(create4)();
        var v1 = f(new Tuple(v.push, alt8(pure9(a))(v.poll)));
        return v1(psr, di);
      };
    };
  };
  var unsafeAttribute = Attribute;
  var pump$prime = function(v) {
    return function(p) {
      return function(effF) {
        var staticEff = effF(true);
        var handlePoll = function(whichF) {
          return function(y) {
            return function __do3() {
              var uu = subscribeO(y, function(i) {
                var f = liftST5(read2(whichF))();
                return f(i);
              });
              return $$void9(liftST5(function() {
                return v.addEffectToDisposalQueue(uu);
              }))();
            };
          };
        };
        var dynamicEff = effF(false);
        var handleEvent = function(y) {
          return function __do3() {
            var uu = subscribeO(y, dynamicEff);
            return $$void9(liftST5(function() {
              return v.addEffectToDisposalQueue(uu);
            }))();
          };
        };
        var go2 = function(v1) {
          if (v1 instanceof OnlyEvent) {
            return handleEvent(v1.value0);
          }
          ;
          if (v1 instanceof OnlyPure) {
            return function() {
              return fastForeachE(v1.value0, staticEff);
            };
          }
          ;
          if (v1 instanceof OnlyPoll) {
            return function __do3() {
              var bang = liftST5(create)();
              var f = liftST5(newSTRef(staticEff))();
              handlePoll(f)(sample3(v1.value0)(bang.event))();
              bang.push(identity9)();
              return liftST5(void12(write2(dynamicEff)(f)))();
            };
          }
          ;
          if (v1 instanceof PureAndEvent) {
            return function __do3() {
              go2(new OnlyPure(v1.value0))();
              return go2(new OnlyEvent(v1.value1))();
            };
          }
          ;
          if (v1 instanceof PureAndPoll) {
            return function __do3() {
              go2(new OnlyPure(v1.value0))();
              return go2(new OnlyPoll(v1.value1))();
            };
          }
          ;
          throw new Error("Failed pattern match at Deku.Core (line 313, column 8 - line 329, column 22): " + [v1.constructor.name]);
        };
        return go2(p);
      };
    };
  };
  var pump = function(psr) {
    return function(poll2) {
      return function(fn) {
        return pump$prime(psr)(poll2)($$const(fn));
      };
    };
  };
  var prop$prime = function(k) {
    return function(v) {
      return function(v1, e, v2) {
        return v2.setProp(k, v, toDekuElement(e));
      };
    };
  };
  var newPSR = function(ancestry, signalDisposalQueueShouldBeTriggered, region) {
    var unsubs = newSTArray();
    var triggerDisposalQueueEffects = function __do3() {
      var stack = liftST5(unsafeFreeze(unsubs))();
      var l = length(stack);
      return forE(0)(l)(function(i) {
        return unsafeIndex4(stack)((l - 1 | 0) - i | 0);
      })();
    };
    var addEffectToDisposalQueue = function(eff) {
      return void12(push(eff)(unsubs))();
    };
    return {
      signalDisposalQueueShouldBeTriggered: once5(signalDisposalQueueShouldBeTriggered),
      ancestry,
      region,
      addEffectToDisposalQueue,
      triggerDisposalQueueEffects
    };
  };
  var handleScope = function(psr) {
    return pump(psr)(un2(PSR)(psr).signalDisposalQueueShouldBeTriggered)(function(v) {
      return un2(PSR)(psr).triggerDisposalQueueEffects();
    })();
  };
  var text5 = function(texts) {
    return function(psr, di) {
      var ancestry = un2(PSR)(psr).ancestry;
      var txt = function() {
        if (texts instanceof OnlyPure) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        if (texts instanceof OnlyEvent) {
          return un2(DOMInterpret)(di).makeText(ancestry, Nothing.value);
        }
        ;
        if (texts instanceof OnlyPoll) {
          return un2(DOMInterpret)(di).makeText(ancestry, Nothing.value);
        }
        ;
        if (texts instanceof PureAndEvent) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        if (texts instanceof PureAndPoll) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        throw new Error("Failed pattern match at Deku.Core (line 826, column 10 - line 850, column 24): " + [texts.constructor.name]);
      }();
      liftST5(function() {
        return un2(DOMInterpret)(di).initializeTextRendering(un2(PSR)(psr).ancestry, txt);
      })();
      var modifiedPoll = function() {
        if (texts instanceof OnlyPure) {
          return new OnlyPure([]);
        }
        ;
        if (texts instanceof OnlyEvent) {
          return new OnlyEvent(texts.value0);
        }
        ;
        if (texts instanceof OnlyPoll) {
          return new OnlyPoll(texts.value0);
        }
        ;
        if (texts instanceof PureAndEvent) {
          return new OnlyEvent(texts.value1);
        }
        ;
        if (texts instanceof PureAndPoll) {
          return new OnlyPoll(texts.value1);
        }
        ;
        throw new Error("Failed pattern match at Deku.Core (line 857, column 20 - line 866, column 36): " + [texts.constructor.name]);
      }();
      (function() {
        if (texts instanceof OnlyPure) {
          return unit;
        }
        ;
        return liftST5(function() {
          return un2(DOMInterpret)(di).markTextAsImpure(ancestry);
        })();
      })();
      var handleTextUpdate = function(useOriginalDi) {
        return function(x) {
          var di2 = function() {
            if (useOriginalDi) {
              return di;
            }
            ;
            return un2(DOMInterpret)(di).dynamicDOMInterpret(unit);
          }();
          return un2(DOMInterpret)(di2).setText(x, txt);
        };
      };
      pump$prime(psr)(modifiedPoll)(handleTextUpdate)();
      var regionEnd = liftST5(un2(StaticRegion)(un2(PSR)(psr).region).end)();
      un2(DOMInterpret)(di).attachText(txt, regionEnd);
      liftST5(function() {
        return un2(StaticRegion)(un2(PSR)(psr).region).element(new Text(txt));
      })();
      var handleRemove = when4(!hasElementParent(un2(PSR)(psr).ancestry))(function() {
        return un2(DOMInterpret)(di).removeText(txt);
      });
      liftST5(function() {
        return un2(PSR)(psr).addEffectToDisposalQueue(handleRemove);
      })();
      return handleScope(psr);
    };
  };
  var text_ = function(txt) {
    return text5(pure9(txt));
  };
  var useDynWith = function(elements) {
    return function(options2) {
      return function(cont) {
        return function(psr, di$prime) {
          liftST5(function() {
            return un2(DOMInterpret)(di$prime).initializeDynRendering(un2(PSR)(psr).ancestry);
          })();
          var v = liftST5(un2(StaticRegion)(un2(PSR)(psr).region).region)();
          var span5 = liftST5(function() {
            return newSpan(v.begin, v.bump);
          })();
          var ancestry = un2(PSR)(psr).ancestry;
          var aref = liftST5(newSTRef(-1 | 0))();
          var handleElements = function(isStatic) {
            return function(v1) {
              var di = function() {
                if (isStatic) {
                  return di$prime;
                }
                ;
                return un2(DOMInterpret)(di$prime).dynamicDOMInterpret(unit);
              }();
              var v2 = liftST5(function() {
                return allocateRegion(v1.value0, span5);
              })();
              var staticRegion = liftST5(function() {
                return newStaticRegion(v2.begin, v2.bump);
              })();
              var eltDisposed = liftST5(newSTRef(true))();
              var eltSendTo = liftST5(create4)();
              var sendTo = merge3([options2.sendTo(v1.value1), eltSendTo.poll]);
              var eltRemove = liftST5(create4)();
              var remove2 = merge3([voidLeft2(options2.remove(v1.value1))(unit), voidLeft2(eltRemove.poll)(unit), un2(PSR)(psr).signalDisposalQueueShouldBeTriggered]);
              var eltLifecycle = liftST5(create4)();
              var a = liftST5(modify(add3(1))(aref))();
              var eltPSR = liftST5(function() {
                return newPSR(dyn(a)(ancestry), eltLifecycle.poll, staticRegion);
              })();
              var v3 = cont({
                value: v1.value1,
                position: v2.position,
                remove: eltRemove.push(unit),
                sendTo: eltSendTo.push
              });
              var handleSendTo = function(newPos) {
                return whenM3(map18(not5)(liftST5(read2(eltDisposed))))(function __do3() {
                  var fromBegin = liftST5(v2.begin)();
                  var fromEnd = liftST5(v2.end)();
                  liftST5(function() {
                    return v2.sendTo(newPos);
                  })();
                  var target6 = liftST5(v2.begin)();
                  return un2(DOMInterpret)(di).beamRegion(fromBegin, fromEnd, target6);
                })();
              };
              var handleRemove = whenM3(map18(not5)(liftST5(read2(eltDisposed))))(function __do3() {
                $$void9(liftST5(write2(true)(eltDisposed)))();
                eltLifecycle.push(unit)();
                return liftST5(v2.remove)();
              });
              pump(eltPSR)(sendTo)(handleSendTo)();
              pump(eltPSR)(once5(remove2))(function(v4) {
                return handleRemove();
              })();
              v3(eltPSR, di);
              return $$void9(liftST5(write2(false)(eltDisposed)))();
            };
          };
          pump$prime(psr)(elements)(handleElements)();
          return handleScope(psr);
        };
      };
    };
  };
  var useDynAtBeginningWith = function(e) {
    return useDynWith(map24(function(v) {
      return new Tuple(new Just(0), v);
    })(e));
  };
  var elementify = function(ns) {
    return function(tag) {
      return function(arrAtts) {
        return function(nuts) {
          return function(psr, di) {
            var isBoring = un2(DOMInterpret)(di).isBoring(un2(PSR)(psr).ancestry);
            return when4(!isBoring)(function __do3() {
              var elt = un2(DOMInterpret)(di).makeElement(un2(PSR)(psr).ancestry, map33(Namespace)(ns), tag);
              var regionEnd = liftST5(un2(StaticRegion)(un2(PSR)(psr).region).end)();
              liftST5(function() {
                return un2(StaticRegion)(un2(PSR)(psr).region).element(new Element2(elt));
              })();
              liftST5(function() {
                return un2(DOMInterpret)(di).initializeElementRendering(un2(PSR)(psr).ancestry, elt);
              })();
              var handleAtts = function(atts) {
                (function() {
                  if (atts instanceof OnlyPure) {
                    return unit;
                  }
                  ;
                  return liftST5(function() {
                    return un2(DOMInterpret)(di).markElementAsImpure(un2(PSR)(psr).ancestry);
                  })();
                })();
                return pump$prime(psr)(atts)(function(useOriginalDi) {
                  var newDi = function() {
                    if (useOriginalDi) {
                      return di;
                    }
                    ;
                    return un2(DOMInterpret)(di).dynamicDOMInterpret(unit);
                  }();
                  return function(v) {
                    return v(un2(PSR)(psr).ancestry, fromDekuElement(elt), newDi);
                  };
                })();
              };
              fastForeachE(arrAtts, handleAtts);
              var eltRegion = liftST5(function() {
                return fromParent(elt);
              })();
              var aref = liftST5(newSTRef(-1 | 0))();
              var handleNuts = function(v) {
                var a = liftST5(modify(add3(1))(aref))();
                var scope2 = liftST5(function() {
                  return newPSR(element(a)(un2(PSR)(psr).ancestry), un2(PSR)(psr).signalDisposalQueueShouldBeTriggered, eltRegion);
                })();
                return v(scope2, di);
              };
              fastForeachE(nuts, handleNuts);
              var handleRemove = when4(!hasElementParent(un2(PSR)(psr).ancestry))(function() {
                return un2(DOMInterpret)(di).removeElement(elt);
              });
              un2(DOMInterpret)(di).attachElement(elt, regionEnd);
              liftST5(function() {
                return un2(PSR)(psr).addEffectToDisposalQueue(handleRemove);
              })();
              return handleScope(psr);
            })();
          };
        };
      };
    };
  };
  var dynOptions = {
    sendTo: function(v) {
      return empty9;
    },
    remove: function(v) {
      return empty9;
    }
  };
  var deferO = function(psr, eff) {
    return liftST5(function() {
      return un2(PSR)(psr).addEffectToDisposalQueue(eff);
    })();
  };
  var useRant = function(e) {
    return function(f) {
      return function(psr, di) {
        var v = liftST5(rant2(e))();
        deferO(psr, liftST5(v.unsubscribe));
        return coerce3(f(v.poll))(psr, di);
      };
    };
  };
  var useRefST = function(a) {
    return function(e) {
      return function(f) {
        return function(psr, di) {
          var r = liftST5(newSTRef(a))();
          var v = liftST5(create)();
          var u = subscribe(sample13(e)(v.event))(function(i) {
            return $$void9(liftST5(write2(i)(r)));
          })();
          v.push(identity9)();
          var v1 = f(read2(r));
          deferO(psr, u);
          return v1(psr, di);
        };
      };
    };
  };
  var useSkimmed = function(x) {
    return function(f) {
      return function(psr, di) {
        var diffusingRef = liftST5(newSTRef(false))();
        var receptacleRef = liftST5(newSTRef(Nil.value))();
        var bang = liftST5(create)();
        var hot = liftST5(create)();
        var uu = subscribe(sample13(x)(bang.event))(function(i) {
          return function __do3() {
            var diffusing = liftST5(read2(diffusingRef))();
            if (diffusing) {
              return hot.push(i)();
            }
            ;
            return liftST5(void12(modify(function(v) {
              return new Cons(i, v);
            })(receptacleRef)))();
          };
        })();
        bang.push(identity9)();
        var receptacle = liftST5(read2(receptacleRef))();
        liftST5(void12(write2(true)(diffusingRef)))();
        var oPoll = function() {
          if (receptacle instanceof Cons) {
            return new PureAndEvent([receptacle.value0], hot.event);
          }
          ;
          if (receptacle instanceof Nil) {
            return new OnlyEvent(hot.event);
          }
          ;
          throw new Error("Failed pattern match at Deku.Core (line 510, column 13 - line 512, column 38): " + [receptacle.constructor.name]);
        }();
        deferO(psr, uu);
        return coerce3(f(oPoll))(psr, di);
      };
    };
  };
  var cb$prime = function(k) {
    return function(v) {
      return function(id4, e, v1) {
        liftST5(function() {
          return v1.markElementAsImpure(id4);
        })();
        return v1.setCb(k, v, toDekuElement(e));
      };
    };
  };
  var cb = /* @__PURE__ */ function() {
    var $236 = map17(map18($$const(true)));
    return function($237) {
      return Cb($236($237));
    };
  }();

  // output/Deku.DOM/index.js
  var textarea = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("textarea");
  }();
  var span4 = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("span");
  }();
  var div3 = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("div");
  }();
  var div_ = /* @__PURE__ */ div3([]);
  var button = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("button");
  }();

  // output/Deku.DOM.Attributes/index.js
  var style = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2256 = prop$prime("style");
      return function($2257) {
        return unsafeAttribute($2256($2257));
      };
    }());
  };
  var style_ = function(dictApplicative) {
    var $2258 = style(dictApplicative.Apply0().Functor0());
    var $2259 = pure(dictApplicative);
    return function($2260) {
      return $2258($2259($2260));
    };
  };
  var placeholder3 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2461 = prop$prime("placeholder");
      return function($2462) {
        return unsafeAttribute($2461($2462));
      };
    }());
  };
  var placeholder_ = function(dictApplicative) {
    var $2463 = placeholder3(dictApplicative.Apply0().Functor0());
    var $2464 = pure(dictApplicative);
    return function($2465) {
      return $2463($2464($2465));
    };
  };
  var klass = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2636 = prop$prime("class");
      return function($2637) {
        return unsafeAttribute($2636($2637));
      };
    }());
  };
  var klass_ = function(dictApplicative) {
    var $2638 = klass(dictApplicative.Apply0().Functor0());
    var $2639 = pure(dictApplicative);
    return function($2640) {
      return $2638($2639($2640));
    };
  };
  var id2 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2701 = prop$prime("id");
      return function($2702) {
        return unsafeAttribute($2701($2702));
      };
    }());
  };
  var id_ = function(dictApplicative) {
    var $2703 = id2(dictApplicative.Apply0().Functor0());
    var $2704 = pure(dictApplicative);
    return function($2705) {
      return $2703($2704($2705));
    };
  };
  var autofocus6 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $3026 = prop$prime("autofocus");
      return function($3027) {
        return unsafeAttribute($3026($3027));
      };
    }());
  };
  var autofocus_ = function(dictApplicative) {
    var $3028 = autofocus6(dictApplicative.Apply0().Functor0());
    var $3029 = pure(dictApplicative);
    return function($3030) {
      return $3028($3029($3030));
    };
  };

  // output/Deku.DOM.Listeners/index.js
  var keydown = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1382 = cb$prime("keydown");
      return function($1383) {
        return unsafeAttribute($1382(cb($1383)));
      };
    }());
  };
  var keydown_ = function(dictApplicative) {
    var $1384 = keydown(dictApplicative.Apply0().Functor0());
    var $1385 = pure(dictApplicative);
    return function($1386) {
      return $1384($1385($1386));
    };
  };
  var click2 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1617 = cb$prime("click");
      return function($1618) {
        return unsafeAttribute($1617(cb($1618)));
      };
    }());
  };
  var click_ = function(dictApplicative) {
    var $1619 = click2(dictApplicative.Apply0().Functor0());
    var $1620 = pure(dictApplicative);
    return function($1621) {
      return $1619($1620($1621));
    };
  };

  // output/Deku.Hooks/index.js
  var voidLeft3 = /* @__PURE__ */ voidLeft(functorAPoll2);
  var switcher = function(f) {
    return function(poll2) {
      return bind2(useSkimmed(poll2))(function(skimmed) {
        return bind2(useRant(skimmed))(function(rantedSkimmed) {
          return bind2(useDynAtBeginningWith(skimmed)({
            sendTo: dynOptions.sendTo,
            remove: function(v1) {
              return voidLeft3(rantedSkimmed)(unit);
            }
          }))(function(v) {
            return f(v.value);
          });
        });
      });
    };
  };
  var switcherFlipped = function(a) {
    return function(b) {
      return switcher(b)(a);
    };
  };

  // output/Data.Exists/index.js
  var runExists = unsafeCoerce2;
  var mkExists = unsafeCoerce2;

  // output/Deku.UnsafeDOM/foreign.js
  var cbs = /* @__PURE__ */ new WeakMap();
  var pushCb = (name16, cb2, el) => {
    var ns = cbs.get(el);
    if (ns != null)
      ns[name16] = cb2;
    else
      cbs.set(el, { [name16]: cb2 });
  };
  var popCb = (name16, el) => {
    var ns = cbs.get(el);
    if (ns == null)
      return null;
    else {
      var result = ns[name16] ?? null;
      ns[name16] = void 0;
      return result;
    }
  };
  var createElement = (t) => document.createElement(t);
  var after = (cs, t) => t.after.apply(t, cs);
  var prepend = (cs, t) => t.prepend.apply(t, cs);
  var createElementNS = (ns, t) => document.createElementNS(ns, t);
  var createText = (t) => document.createTextNode(t);
  var createDocumentFragment = () => document.createDocumentFragment();
  var setTextContent = (value13, node) => node.textContent = value13;
  var addEventListener = (type, listener, useCapture, target6) => target6.addEventListener(type, listener, useCapture);
  var removeEventListener = (type, listener, useCapture, target6) => target6.removeEventListener(type, listener, useCapture);
  var eventListener = (fn) => fn;

  // output/Unsafe.Reference/foreign.js
  function reallyUnsafeRefEq(a) {
    return function(b) {
      return a === b;
    };
  }

  // output/Unsafe.Reference/index.js
  var unsafeRefEq = reallyUnsafeRefEq;

  // output/Web.DOM.ChildNode/foreign.js
  function remove(node) {
    return function() {
      return node.remove();
    };
  }

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name16) {
    return function(doctype) {
      return doctype[name16];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function setAttribute(name16) {
    return function(value13) {
      return function(element2) {
        return function() {
          element2.setAttribute(name16, value13);
        };
      };
    };
  }
  function removeAttribute(name16) {
    return function(element2) {
      return function() {
        element2.removeAttribute(name16);
      };
    };
  }

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var children = getEffProp("children");
  var _firstElementChild = getEffProp("firstElementChild");
  var _lastElementChild = getEffProp("lastElementChild");
  var childElementCount = getEffProp("childElementCount");
  function _querySelector(selector) {
    return function(node) {
      return function() {
        return node.querySelector(selector);
      };
    };
  }

  // output/Web.DOM.ParentNode/index.js
  var map19 = /* @__PURE__ */ map(functorEffect);
  var querySelector = function(qs) {
    var $2 = map19(toMaybe);
    var $3 = _querySelector(qs);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Web.DOM.Node/foreign.js
  var getEffProp2 = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var baseURI = getEffProp2("baseURI");
  var _ownerDocument = getEffProp2("ownerDocument");
  var _parentNode = getEffProp2("parentNode");
  var _parentElement = getEffProp2("parentElement");
  var childNodes = getEffProp2("childNodes");
  var _firstChild = getEffProp2("firstChild");
  var _lastChild = getEffProp2("lastChild");
  var _previousSibling = getEffProp2("previousSibling");
  var _nextSibling = getEffProp2("nextSibling");
  var _nodeValue = getEffProp2("nodeValue");
  var textContent = getEffProp2("textContent");

  // output/Web.DOM.Node/index.js
  var map20 = /* @__PURE__ */ map(functorEffect);
  var nextSibling = /* @__PURE__ */ function() {
    var $15 = map20(toMaybe);
    return function($16) {
      return $15(_nextSibling($16));
    };
  }();
  var firstChild = /* @__PURE__ */ function() {
    var $25 = map20(toMaybe);
    return function($26) {
      return $25(_firstChild($26));
    };
  }();

  // output/Web.DOM.Text/index.js
  var toChildNode = unsafeCoerce2;

  // output/Deku.Interpret/index.js
  var bind4 = /* @__PURE__ */ bind(bindEffect);
  var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var $$void10 = /* @__PURE__ */ $$void(functorEffect);
  var coerce4 = /* @__PURE__ */ coerce();
  var mapFlipped4 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var liftST6 = /* @__PURE__ */ liftST(monadSTEffect);
  var map21 = /* @__PURE__ */ map(functorEffect);
  var fromJust4 = /* @__PURE__ */ fromJust();
  var traverse_3 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var unsetAttributeEffect = /* @__PURE__ */ mkEffectFn2(function(v) {
    return function(elt$prime) {
      var asElt = fromDekuElement(elt$prime);
      return function __do3() {
        var l = popCb(v, asElt);
        var asEventTarget = fromDekuElement(elt$prime);
        for_3(toMaybe(l))(function(toRemove) {
          return function() {
            return removeEventListener(v, toRemove, false, asEventTarget);
          };
        })();
        return removeAttribute(v)(asElt)();
      };
    };
  });
  var setTextEffect = function(str, txt$prime) {
    var txt = fromDekuText(txt$prime);
    return setTextContent(str, txt);
  };
  var setCbEffect = /* @__PURE__ */ mkEffectFn3(function(v) {
    return function(v1) {
      return function(elt$prime) {
        var $43 = v === "@self@";
        if ($43) {
          return $$void10(v1(elt$prime));
        }
        ;
        var asElt = fromDekuElement(elt$prime);
        return function __do3() {
          var l = popCb(v, asElt);
          var eventTarget = fromDekuElement(elt$prime);
          for_3(toMaybe(l))(function(toRemove) {
            return function() {
              return removeEventListener(v, toRemove, false, eventTarget);
            };
          })();
          var nl = eventListener(mkEffectFn1(v1));
          addEventListener(v, nl, false, eventTarget);
          return pushCb(v, nl, asElt);
        };
      };
    };
  });
  var removeTextEffect = function(t) {
    return remove(toChildNode(fromDekuText(t)))();
  };
  var removeElementEffect = function(e) {
    return remove(fromDekuElement(e))();
  };
  var makeTextEffect = function(v, mstr) {
    var txt = createText(fromMaybe("")(mstr));
    return toDekuText(txt);
  };
  var makeElementEffect = function(v, ns, tag) {
    var elt = function() {
      var v1 = coerce4(ns);
      if (v1 instanceof Nothing) {
        return createElement(coerce4(tag));
      }
      ;
      if (v1 instanceof Just) {
        return createElementNS(coerce4(v1.value0), coerce4(tag));
      }
      ;
      throw new Error("Failed pattern match at Deku.Interpret (line 44, column 10 - line 46, column 71): " + [v1.constructor.name]);
    }();
    return toDekuElement(elt);
  };
  var getDisableable = function(elt) {
    var go2 = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return Nothing.value;
        }
        ;
        var v1 = function(v2) {
          if (v instanceof Cons) {
            $copy_v = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Deku.Interpret (line 171, column 1 - line 171, column 69): " + [v.constructor.name]);
        };
        if (v instanceof Cons) {
          var $54 = runExists(function(v2) {
            return mapFlipped4(v2.e(elt))(function(e$prime) {
              return mkExists({
                f: v2.f,
                e: e$prime
              });
            });
          })(v.value0);
          if ($54 instanceof Just) {
            $tco_done = true;
            return new Just($54.value0);
          }
          ;
          return v1(true);
        }
        ;
        return v1(true);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return go2;
  };
  var disableables = /* @__PURE__ */ function() {
    return new Cons(mkExists({
      e: fromElement,
      f: setDisabled
    }), new Cons(mkExists({
      e: fromElement4,
      f: setDisabled3
    }), new Cons(mkExists({
      e: fromElement3,
      f: setDisabled2
    }), new Cons(mkExists({
      e: fromElement5,
      f: setDisabled4
    }), new Cons(mkExists({
      e: fromElement6,
      f: setDisabled5
    }), new Cons(mkExists({
      e: fromElement7,
      f: setDisabled6
    }), new Cons(mkExists({
      e: fromElement8,
      f: setDisabled7
    }), new Cons(mkExists({
      e: fromElement9,
      f: setDisabled8
    }), new Cons(mkExists({
      e: fromElement10,
      f: setDisabled9
    }), Nil.value)))))))));
  }();
  var setPropEffect = /* @__PURE__ */ mkEffectFn3(function(v) {
    return function(v1) {
      return function(elt$prime) {
        var elt = fromDekuElement(elt$prime);
        var o = function() {
          var v3 = function(v4) {
            var v5 = function(v6) {
              var v7 = function(v8) {
                var v9 = function(v10) {
                  if (otherwise) {
                    return setAttribute(v)(v1)(elt);
                  }
                  ;
                  throw new Error("Failed pattern match at Deku.Interpret (line 54, column 1 - line 54, column 30): ");
                };
                var $60 = v === "disabled";
                if ($60) {
                  var $61 = getDisableable(elt)(disableables);
                  if ($61 instanceof Just) {
                    return runExists(function(v10) {
                      return v10.f(v1 === "true")(v10.e);
                    })($61.value0);
                  }
                  ;
                  return v9(true);
                }
                ;
                return v9(true);
              };
              var $66 = v === "checked";
              if ($66) {
                var $67 = fromElement4(elt);
                if ($67 instanceof Just) {
                  return setChecked(v1 === "true")($67.value0);
                }
                ;
                return v7(true);
              }
              ;
              return v7(true);
            };
            var $69 = v === "value";
            if ($69) {
              var $70 = fromElement10(elt);
              if ($70 instanceof Just) {
                return setValue11(v1)($70.value0);
              }
              ;
              return v5(true);
            }
            ;
            return v5(true);
          };
          var $72 = v === "value";
          if ($72) {
            var $73 = fromElement4(elt);
            if ($73 instanceof Just) {
              return setValue3(v1)($73.value0);
            }
            ;
            return v3(true);
          }
          ;
          return v3(true);
        }();
        return o;
      };
    };
  });
  var bufferPortal = function __do2() {
    var frag = createDocumentFragment();
    return new Tuple(0, toDekuElement(frag));
  };
  var attachNodeEffect = function(nodes, anchor) {
    if (anchor instanceof ParentStart) {
      return prepend(nodes, fromDekuElement(anchor.value0));
    }
    ;
    if (anchor instanceof Element2) {
      return after(nodes, fromDekuElement(anchor.value0));
    }
    ;
    if (anchor instanceof Text) {
      return after(nodes, fromDekuText(anchor.value0));
    }
    ;
    throw new Error("Failed pattern match at Deku.Interpret (line 262, column 3 - line 270, column 56): " + [anchor.constructor.name]);
  };
  var attachTextEffect = /* @__PURE__ */ mkEffectFn2(function(txt) {
    return runEffectFn2(attachNodeEffect)([fromDekuText(txt)]);
  });
  var beamRegionEffect = /* @__PURE__ */ function() {
    var toNode2 = function(a) {
      if (a instanceof Element2) {
        return fromDekuElement(a.value0);
      }
      ;
      if (a instanceof Text) {
        return fromDekuText(a.value0);
      }
      ;
      throw new Error("Failed pattern match at Deku.Interpret (line 256, column 28 - line 258, column 39): " + [a.constructor.name]);
    };
    var beamNodes = function(first, end, target6) {
      var acc = liftST6(newSTArray)();
      var next2 = $$new(new Just(first))();
      (function() {
        while (map21(isJust)(read(next2))()) {
          (function __do3() {
            var current = map21(fromJust4)(read(next2))();
            $$void10(liftST6(push(current)(acc)))();
            var $82 = unsafeRefEq(current)(end);
            if ($82) {
              return $$void10(write(Nothing.value)(next2))();
            }
            ;
            var nextCandidate = nextSibling(current)();
            return $$void10(write(nextCandidate)(next2))();
          })();
        }
        ;
        return {};
      })();
      var nodes = liftST6(unsafeFreeze(acc))();
      return attachNodeEffect(nodes, target6);
    };
    return function(v, v1, v2) {
      if (v1 instanceof ParentStart) {
        return unit;
      }
      ;
      if (v instanceof ParentStart) {
        return bind4(firstChild(fromDekuElement(v.value0)))(traverse_3(function(first) {
          return function() {
            return beamNodes(first, toNode2(v1), v2);
          };
        }))();
      }
      ;
      var endNode = toNode2(v1);
      var beginNode = toNode2(v);
      var $88 = unsafeRefEq(beginNode)(endNode);
      if ($88) {
        return unit;
      }
      ;
      return bind4(nextSibling(beginNode))(traverse_3(function(first) {
        return function() {
          return beamNodes(first, endNode, v2);
        };
      }))();
    };
  }();
  var attachElementEffect = /* @__PURE__ */ mkEffectFn2(function(v) {
    return runEffectFn2(attachNodeEffect)([fromDekuElement(v)]);
  });

  // output/Deku.FullDOMInterpret/index.js
  var fullDOMInterpret = {
    dynamicDOMInterpret: function(v) {
      return fullDOMInterpret;
    },
    portalDOMInterpret: function(v) {
      return fullDOMInterpret;
    },
    isBoring: /* @__PURE__ */ $$const(false),
    makeElement: makeElementEffect,
    attachElement: attachElementEffect,
    initializeElementRendering: function(v, v1) {
      return unit;
    },
    initializeTextRendering: function(v, v1) {
      return unit;
    },
    markElementAsImpure: function(v) {
      return unit;
    },
    setProp: setPropEffect,
    setCb: setCbEffect,
    unsetAttribute: unsetAttributeEffect,
    removeElement: removeElementEffect,
    makeText: makeTextEffect,
    attachText: attachTextEffect,
    setText: setTextEffect,
    removeText: removeTextEffect,
    markTextAsImpure: function(v) {
      return unit;
    },
    beamRegion: beamRegionEffect,
    initializePortalRendering: function(v) {
      return unit;
    },
    markPortalAsRendered: function(v) {
      return unit;
    },
    bufferPortal,
    initializeDynRendering: function(v) {
      return unit;
    },
    initializeFixedRendering: function(v) {
      return unit;
    }
  };

  // output/Deku.Toplevel/index.js
  var bind5 = /* @__PURE__ */ bind(bindEffect);
  var liftST7 = /* @__PURE__ */ liftST(monadSTEffect);
  var $$void11 = /* @__PURE__ */ $$void(functorEffect);
  var map25 = /* @__PURE__ */ map(functorMaybe);
  var runInElement = function(elt) {
    return function(v) {
      return function __do3() {
        var v1 = liftST7(create4)();
        var region = liftST7(function() {
          return fromParent(toDekuElement(elt));
        })();
        var scope2 = liftST7(function() {
          return newPSR(root, v1.poll, region);
        })();
        $$void11(function() {
          return v(scope2, fullDOMInterpret);
        })();
        return v1.push(unit);
      };
    };
  };
  var doInBody = function(f) {
    return function(elt) {
      return function __do3() {
        var b$prime = bind5(bind5(windowImpl)(document2))(body)();
        return maybe(throwException(error("Could not find element")))(flip(f)(elt))(map25(toElement)(b$prime))();
      };
    };
  };
  var runInBody = /* @__PURE__ */ doInBody(runInElement);

  // output/Effect.Timer/foreign.js
  function setTimeoutImpl(ms) {
    return function(fn) {
      return function() {
        return setTimeout(fn, ms);
      };
    };
  }

  // output/Effect.Timer/index.js
  var setTimeout2 = setTimeoutImpl;

  // output/Web.UIEvent.KeyboardEvent/foreign.js
  function key(e) {
    return e.key;
  }
  function code(e) {
    return e.code;
  }

  // output/Main/index.js
  var bind6 = /* @__PURE__ */ bind(bindAff);
  var pure10 = /* @__PURE__ */ pure(applicativeAff);
  var map26 = /* @__PURE__ */ map(functorEither);
  var eq5 = /* @__PURE__ */ eq(eqCodePoint);
  var klass_2 = /* @__PURE__ */ klass_(applicativeAPoll2);
  var bind1 = /* @__PURE__ */ bind(bindEffect);
  var mapFlipped5 = /* @__PURE__ */ mapFlipped(functorEffect);
  var pure15 = /* @__PURE__ */ pure(applicativeEffect);
  var min6 = /* @__PURE__ */ min(ordInt);
  var show3 = /* @__PURE__ */ show(showInt);
  var append12 = /* @__PURE__ */ append(semigroupArray);
  var $$void12 = /* @__PURE__ */ $$void(functorEffect);
  var mapFlipped1 = /* @__PURE__ */ mapFlipped(functorAPoll2);
  var apply8 = /* @__PURE__ */ apply2(applyAPoll2);
  var map110 = /* @__PURE__ */ map(functorAPoll2);
  var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var liftST8 = /* @__PURE__ */ liftST(monadSTEffect);
  var click_2 = /* @__PURE__ */ click_(applicativeAPoll2);
  var liftEffect1 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var when5 = /* @__PURE__ */ when(applicativeEffect);
  var foldlWithIndex2 = /* @__PURE__ */ foldlWithIndex(foldableWithIndexArray);
  var show1 = /* @__PURE__ */ show(showNumber);
  var min1 = /* @__PURE__ */ min(ordNumber);
  var id_2 = /* @__PURE__ */ id_(applicativeAPoll2);
  var style_2 = /* @__PURE__ */ style_(applicativeAPoll2);
  var placeholder_2 = /* @__PURE__ */ placeholder_(applicativeAPoll2);
  var autofocus_2 = /* @__PURE__ */ autofocus_(applicativeAPoll2);
  var keydown_2 = /* @__PURE__ */ keydown_(applicativeAPoll2);
  var NotTyped = /* @__PURE__ */ function() {
    function NotTyped2() {
    }
    ;
    NotTyped2.value = new NotTyped2();
    return NotTyped2;
  }();
  var Correct = /* @__PURE__ */ function() {
    function Correct2() {
    }
    ;
    Correct2.value = new Correct2();
    return Correct2;
  }();
  var Incorrect = /* @__PURE__ */ function() {
    function Incorrect2() {
    }
    ;
    Incorrect2.value = new Incorrect2();
    return Incorrect2;
  }();
  var truncate = function(n) {
    return toNumber(floor2(n * 10)) / 10;
  };
  var loadTextFile = function(path) {
    return bind6(get2(string)(path))(function(result) {
      return pure10(map26(function(v) {
        return v.body;
      })(result));
    });
  };
  var getCharState = function(index5) {
    return function(targetChar) {
      return function(typedChars) {
        var v = index(typedChars)(index5);
        if (v instanceof Nothing) {
          return NotTyped.value;
        }
        ;
        if (v instanceof Just) {
          var $60 = eq5(v.value0)(targetChar);
          if ($60) {
            return Correct.value;
          }
          ;
          return Incorrect.value;
        }
        ;
        throw new Error("Failed pattern match at Main (line 338, column 3 - line 343, column 23): " + [v.constructor.name]);
      };
    };
  };
  var renderText = function(targetChars) {
    return function(typedInput) {
      var typedChars = toCodePointArray(typedInput);
      return mapWithIndex2(function(i) {
        return function(targetChar) {
          var charState = getCharState(i)(targetChar)(typedChars);
          var charClass = function() {
            if (charState instanceof NotTyped) {
              return "char-not-typed";
            }
            ;
            if (charState instanceof Correct) {
              return "char-correct";
            }
            ;
            if (charState instanceof Incorrect) {
              return "char-incorrect";
            }
            ;
            throw new Error("Failed pattern match at Main (line 324, column 23 - line 327, column 42): " + [charState.constructor.name]);
          }();
          return span4([klass_2(charClass)])([text_(singleton7(targetChar))]);
        };
      })(targetChars);
    };
  };
  var focusElementById = function(id4) {
    return function __do3() {
      var doc = mapFlipped5(bind1(windowImpl)(document2))(toParentNode)();
      var element2 = querySelector("#" + id4)(doc)();
      if (element2 instanceof Just) {
        var v = fromElement2(element2.value0);
        if (v instanceof Just) {
          return focus(v.value0)();
        }
        ;
        if (v instanceof Nothing) {
          return unit;
        }
        ;
        throw new Error("Failed pattern match at Main (line 162, column 16 - line 164, column 27): " + [v.constructor.name]);
      }
      ;
      if (element2 instanceof Nothing) {
        return unit;
      }
      ;
      throw new Error("Failed pattern match at Main (line 161, column 3 - line 165, column 25): " + [element2.constructor.name]);
    };
  };
  var defaultExercises = [{
    text: "The quick brown fox jumps over the lazy dog.",
    description: "Classic pangram"
  }, {
    text: "Deku is a UI framework that leverages a push-based reactive model for web applications.",
    description: "About Deku"
  }, {
    text: "PureScript is a strongly-typed functional programming language that compiles to JavaScript.",
    description: "About PureScript"
  }];
  var cleanText = function(text6) {
    var step1 = replaceAll("\r\n")(" ")(text6);
    var step2 = replaceAll("\n")(" ")(step1);
    var step3 = replaceAll("\u2018")("'")(step2);
    var step4 = replaceAll("\u2019")("'")(step3);
    var step5 = replaceAll("\u201C")('"')(step4);
    var step6 = replaceAll("\u201D")('"')(step5);
    var step7 = replaceAll("\u2013")("-")(step6);
    var step8 = replaceAll("\u2014")("-")(step7);
    var step9 = replaceAll("\u2026")("...")(step8);
    var step10 = replaceAll("  ")(" ")(step9);
    var step11 = replaceAll("   ")(" ")(step10);
    var step12 = joinWith(" ")(filter(function(s) {
      return length5(trim(s)) > 0;
    })(split(" ")(step11)));
    var step13 = trim(step12);
    var isPrintable = function(c) {
      return c >= " " && c <= "~" || c === " ";
    };
    return fromCharArray(filter(isPrintable)(toCharArray(step13)));
  };
  var splitIntoPages = function(content3) {
    var createPage = function($copy_paras) {
      return function($copy_startIdx) {
        return function($copy_endIdx) {
          return function($copy_acc) {
            var $tco_var_paras = $copy_paras;
            var $tco_var_startIdx = $copy_startIdx;
            var $tco_var_endIdx = $copy_endIdx;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(paras, startIdx, endIdx, acc) {
              var $67 = startIdx >= length(paras);
              if ($67) {
                $tco_done = true;
                return acc;
              }
              ;
              var pageParas = slice(startIdx)(min6(endIdx)(length(paras)))(paras);
              var pageText = joinWith("\n\n")(pageParas);
              var nextStartIdx = function() {
                var $68 = endIdx >= length(paras);
                if ($68) {
                  return endIdx;
                }
                ;
                return endIdx;
              }();
              var nextEndIdx = function() {
                var $69 = endIdx < length(paras);
                if ($69) {
                  return endIdx + 1 | 0;
                }
                ;
                return endIdx;
              }();
              var cleanedText = cleanText(pageText);
              var exercise = {
                text: cleanedText,
                description: "Page " + show3(length(acc) + 1 | 0)
              };
              var $70 = length5(cleanedText) > 0;
              if ($70) {
                $tco_var_paras = paras;
                $tco_var_startIdx = nextStartIdx;
                $tco_var_endIdx = nextEndIdx;
                $copy_acc = append12(acc)([exercise]);
                return;
              }
              ;
              $tco_var_paras = paras;
              $tco_var_startIdx = nextStartIdx;
              $tco_var_endIdx = nextEndIdx;
              $copy_acc = acc;
              return;
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_paras, $tco_var_startIdx, $tco_var_endIdx, $copy_acc);
            }
            ;
            return $tco_result;
          };
        };
      };
    };
    var cleanedContent = replace("\r")("")(content3);
    var paragraphs = split("\n\n")(cleanedContent);
    return createPage(paragraphs)(0)(1)([]);
  };
  var main = /* @__PURE__ */ $$void12(/* @__PURE__ */ runInBody(/* @__PURE__ */ bind2(/* @__PURE__ */ useState(defaultExercises))(function(v) {
    return bind2(useState(0))(function(v1) {
      return bind2(useState(""))(function(v2) {
        return bind2(useRefST("")(v2.value1))(function(currentInputRef) {
          return bind2(useRefST(0)(v1.value1))(function(currentIndexRef) {
            return bind2(useRefST(defaultExercises)(v.value1))(function(exercisesRef) {
              var currentExercise = mapFlipped1(apply8(map110(Tuple.create)(v.value1))(v1.value1))(function(v3) {
                return fromMaybe({
                  text: "",
                  description: ""
                })(index(v3.value0)(v3.value1));
              });
              var nextExercise = function __do3() {
                liftEffect2(v2.value0(""))();
                var currentIdx = liftST8(currentIndexRef)();
                var exs = liftST8(exercisesRef)();
                var newIndex = function() {
                  var $77 = currentIdx >= (length(exs) - 1 | 0);
                  if ($77) {
                    return 0;
                  }
                  ;
                  return currentIdx + 1 | 0;
                }();
                liftEffect2(v1.value0(newIndex))();
                return $$void12(liftEffect2(setTimeout2(50)(focusElementById("typing-input"))))();
              };
              var handleKeyPress = function(keyEvent) {
                return function __do3() {
                  var current = liftST8(currentInputRef)();
                  var keyPressed = key(keyEvent);
                  var keyCode = code(keyEvent);
                  var newInput = function() {
                    var $78 = keyCode === "Backspace";
                    if ($78) {
                      return take3(length5(current) - 1 | 0)(current);
                    }
                    ;
                    var $79 = length5(keyPressed) === 1 || keyCode === "Space";
                    if ($79) {
                      return current + function() {
                        var $80 = keyCode === "Space";
                        if ($80) {
                          return " ";
                        }
                        ;
                        return keyPressed;
                      }();
                    }
                    ;
                    return current;
                  }();
                  return liftEffect2(v2.value0(newInput))();
                };
              };
              return div3([klass_2("typing-trainer-container")])([div3([klass_2("load-book-section")])([button([klass_2("load-book-btn"), click_2($$const(launchAff_(bind6(loadTextFile("books/TheDispossessed_LeGuin.txt"))(function(result) {
                return liftEffect1(function() {
                  if (result instanceof Left) {
                    return pure15(unit);
                  }
                  ;
                  if (result instanceof Right) {
                    var bookExercises = splitIntoPages(result.value0);
                    return when5(length(bookExercises) > 0)(function __do3() {
                      v.value0(bookExercises)();
                      return v1.value0(0)();
                    });
                  }
                  ;
                  throw new Error("Failed pattern match at Main (line 222, column 32 - line 228, column 50): " + [result.constructor.name]);
                }());
              }))))])([text_("Load Book")])]), div3([klass_2("stats")])([switcherFlipped(apply8(map110(Tuple.create)(currentExercise))(v2.value1))(function(v3) {
                var typed$prime = length5(v3.value1);
                var total = length5(v3.value0.text);
                var progress = function() {
                  var $85 = total === 0;
                  if ($85) {
                    return 0;
                  }
                  ;
                  return toNumber(typed$prime) * 100 / toNumber(total);
                }();
                var compareChars = foldlWithIndex2(function(i) {
                  return function(acc) {
                    return function(targetChar) {
                      var v4 = codePointAt(i)(v3.value1);
                      if (v4 instanceof Just) {
                        var $87 = eq5(v4.value0)(targetChar);
                        if ($87) {
                          return acc + 1 | 0;
                        }
                        ;
                        return acc;
                      }
                      ;
                      if (v4 instanceof Nothing) {
                        return acc;
                      }
                      ;
                      throw new Error("Failed pattern match at Main (line 243, column 21 - line 245, column 37): " + [v4.constructor.name]);
                    };
                  };
                })(0)(toCodePointArray(v3.value0.text));
                var accuracy = function() {
                  var $89 = typed$prime === 0;
                  if ($89) {
                    return 100;
                  }
                  ;
                  return toNumber(compareChars) / toNumber(typed$prime) * 100;
                }();
                return div_([div_([text_("Progress: " + (show1(min1(100)(truncate(progress))) + "%"))]), div_([text_("Accuracy: " + (show1(truncate(accuracy)) + "%"))])]);
              })]), div3([klass_2("exercise-description")])([text5(map110(function($104) {
                return function(v3) {
                  return "Exercise: " + v3;
                }(function(v3) {
                  return v3.description;
                }($104));
              })(currentExercise))]), switcherFlipped(apply8(map110(Tuple.create)(v.value1))(v1.value1))(function(v3) {
                return div3([klass_2("progress-indicator")])([text_("Page " + (show3(v3.value1 + 1 | 0) + (" of " + show3(length(v3.value0)))))]);
              }), div3([klass_2("text-display")])([switcherFlipped(apply8(map110(Tuple.create)(currentExercise))(v2.value1))(function(v3) {
                var targetChars = toCodePointArray(v3.value0.text);
                return div_(renderText(targetChars)(v3.value1));
              })]), textarea([klass_2("hidden-input"), id_2("typing-input"), style_2("position: fixed; left: -9999px; width: 1px; height: 1px; opacity: 0;"), placeholder_2("Start typing..."), autofocus_2("autofocus"), keydown_2(handleKeyPress)])([]), div3([klass_2("controls")])([button([klass_2("reset-btn"), click_2($$const(function __do3() {
                liftEffect2(v2.value0(""))();
                return liftEffect2(focusElementById("typing-input"))();
              }))])([text_("Reset")]), button([klass_2("next-btn"), click_2($$const(nextExercise))])([text_("Next Page")])])]);
            });
          });
        });
      });
    });
  })));

  // <stdin>
  main();
})();
